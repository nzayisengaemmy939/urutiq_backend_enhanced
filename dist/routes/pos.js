import { validateBody } from '../validate';
import { z } from 'zod';
import nodemailer from 'nodemailer';
import multer from 'multer';
// Configure multer for receipt file uploads
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 5 * 1024 * 1024 // 5MB limit
    }
});
// Validation schemas
const emailReceiptSchema = z.object({
    to: z.string().email(),
    subject: z.string().optional(),
    message: z.string().optional()
});
const hardwareTestSchema = z.object({
    deviceType: z.enum(['printer', 'scanner', 'cash_drawer'])
});
export function mountPOSRoutes(router) {
    /**
     * Email receipt to customer
     */
    router.post('/pos/email-receipt', upload.single('receipt'), async (req, res) => {
        try {
            console.log('üîç POS Email Receipt Debug:', {
                body: req.body,
                file: req.file ? { name: req.file.originalname, size: req.file.size } : null,
                headers: req.headers['content-type']
            });
            // Validate request
            const { to, subject, message } = emailReceiptSchema.parse(req.body);
            if (!req.file) {
                return res.status(400).json({ error: 'Receipt file is required' });
            }
            // Use defaults if not provided
            const emailSubject = subject || `Receipt ${req.file.originalname || 'Receipt'}`;
            const emailMessage = message || 'Thank you for your purchase. Please find your receipt attached.';
            // Create transporter from env (same as invoice email)
            const smtpUrl = process.env.SMTP_URL;
            let transporter = smtpUrl ? nodemailer.createTransport(smtpUrl) : nodemailer.createTransport({
                host: process.env.SMTP_HOST,
                port: process.env.SMTP_PORT ? Number(process.env.SMTP_PORT) : 587,
                secure: !!process.env.SMTP_SECURE && process.env.SMTP_SECURE !== 'false',
                auth: (process.env.SMTP_USER || process.env.SMTP_PASS) ? { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS } : undefined,
            });
            const from = process.env.SMTP_FROM || process.env.REPORTS_FROM_EMAIL || 'no-reply@urutiIQ.local';
            // Prepare email
            const mailOptions = {
                from,
                to,
                subject: emailSubject,
                text: emailMessage,
                html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">Thank You for Your Purchase!</h2>
            <p>${emailMessage}</p>
            <p>Please find your receipt attached to this email.</p>
            <br>
            <p style="color: #666; font-size: 12px;">
              This receipt was generated by UrutiIQ POS System<br>
              If you have any questions, please contact us.
            </p>
          </div>
        `,
                attachments: [
                    {
                        filename: req.file.originalname || 'receipt.pdf',
                        content: req.file.buffer,
                        contentType: req.file.mimetype || 'application/pdf'
                    }
                ]
            };
            // Send email
            console.log('Attempting to send email to:', to);
            console.log('SMTP Config:', {
                host: process.env.SMTP_HOST,
                port: process.env.SMTP_PORT,
                user: process.env.SMTP_USER
            });
            const info = await transporter.sendMail(mailOptions);
            const accepted = info?.accepted || [];
            if (accepted.length === 0)
                return res.status(502).json({ ok: false, error: 'not_accepted', provider: info });
            res.json({
                ok: true,
                success: true,
                message: 'Receipt sent successfully',
                sentTo: to,
                id: info.messageId || true
            });
        }
        catch (e) {
            console.error('‚ùå Email receipt send failed:', e);
            res.status(500).json({ ok: false, error: e instanceof Error ? e.message : 'send_failed' });
        }
    });
    /**
     * Test hardware connectivity
     */
    router.post('/pos/hardware/test', validateBody(hardwareTestSchema), async (req, res) => {
        try {
            const { deviceType } = req.body;
            // Simulate hardware test - in production, this would test actual hardware
            const testResults = {
                printer: {
                    connected: Math.random() > 0.3, // 70% success rate simulation
                    model: 'Epson TM-T82II',
                    status: 'Ready',
                    paperLevel: 'Normal'
                },
                scanner: {
                    connected: Math.random() > 0.2, // 80% success rate simulation
                    model: 'Honeywell Voyager 1200g',
                    status: 'Ready',
                    batteryLevel: '85%'
                },
                cash_drawer: {
                    connected: Math.random() > 0.1, // 90% success rate simulation
                    model: 'APG Series 100',
                    status: 'Closed',
                    lockStatus: 'Locked'
                }
            };
            const result = testResults[deviceType];
            res.json({
                success: result.connected,
                deviceType,
                ...result,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('Hardware test error:', error);
            res.status(500).json({
                error: 'Hardware test failed',
                message: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    });
    /**
     * Get POS analytics/metrics
     */
    router.get('/pos/analytics', async (req, res) => {
        try {
            const { period = 'today', location } = req.query;
            // Calculate date range based on period
            const now = new Date();
            let startDate;
            switch (period) {
                case 'today':
                    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    break;
                case 'week':
                    startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'month':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    break;
                default:
                    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            }
            // This would query actual transaction data in production
            // For now, we'll return simulated analytics
            const analytics = {
                period: period,
                dateRange: {
                    start: startDate.toISOString(),
                    end: now.toISOString()
                },
                metrics: {
                    totalSales: Math.floor(Math.random() * 10000) + 1000,
                    transactionCount: Math.floor(Math.random() * 100) + 10,
                    averageTransaction: 0,
                    topPaymentMethod: 'card',
                    totalTax: 0,
                    totalDiscount: 0
                },
                topProducts: [
                    { name: 'Coffee Latte', quantity: 15, revenue: 75.00 },
                    { name: 'Blueberry Muffin', quantity: 12, revenue: 36.00 },
                    { name: 'Americano', quantity: 8, revenue: 32.00 }
                ],
                hourlyBreakdown: Array.from({ length: 24 }, (_, hour) => ({
                    hour,
                    sales: Math.floor(Math.random() * 500),
                    transactions: Math.floor(Math.random() * 10)
                }))
            };
            // Calculate derived metrics
            analytics.metrics.averageTransaction = analytics.metrics.totalSales / analytics.metrics.transactionCount;
            analytics.metrics.totalTax = analytics.metrics.totalSales * 0.08; // 8% tax simulation
            analytics.metrics.totalDiscount = analytics.metrics.totalSales * 0.05; // 5% average discount
            res.json(analytics);
        }
        catch (error) {
            console.error('POS analytics error:', error);
            res.status(500).json({
                error: 'Failed to fetch analytics',
                message: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    });
    /**
     * Get POS system status
     */
    router.get('/pos/status', async (req, res) => {
        try {
            const status = {
                system: {
                    status: 'online',
                    version: '1.0.0',
                    uptime: process.uptime(),
                    lastRestart: new Date(Date.now() - process.uptime() * 1000).toISOString()
                },
                hardware: {
                    printer: {
                        connected: true,
                        status: 'ready',
                        model: 'Epson TM-T82II'
                    },
                    scanner: {
                        connected: true,
                        status: 'ready',
                        model: 'Honeywell Voyager 1200g'
                    },
                    cashDrawer: {
                        connected: true,
                        status: 'closed',
                        model: 'APG Series 100'
                    }
                },
                network: {
                    status: 'connected',
                    latency: Math.floor(Math.random() * 50) + 10, // 10-60ms simulation
                    bandwidth: 'high'
                },
                database: {
                    status: 'connected',
                    responseTime: Math.floor(Math.random() * 20) + 5 // 5-25ms simulation
                }
            };
            res.json(status);
        }
        catch (error) {
            console.error('POS status error:', error);
            res.status(500).json({
                error: 'Failed to get system status',
                message: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    });
    /**
     * Process barcode scan
     */
    router.post('/pos/scan-barcode', async (req, res) => {
        try {
            const { barcode, location } = req.body;
            if (!barcode) {
                return res.status(400).json({ error: 'Barcode is required' });
            }
            // This would integrate with your inventory system
            // For now, simulate a product lookup
            const mockProducts = [
                { id: '1', barcode: '123456789', name: 'Coffee Latte', price: 5.00 },
                { id: '2', barcode: '987654321', name: 'Blueberry Muffin', price: 3.00 },
                { id: '3', barcode: '456789123', name: 'Americano', price: 4.00 }
            ];
            const product = mockProducts.find(p => p.barcode === barcode);
            if (product) {
                res.json({
                    found: true,
                    product: {
                        id: product.id,
                        name: product.name,
                        price: product.price,
                        barcode: product.barcode,
                        inStock: true,
                        quantity: Math.floor(Math.random() * 50) + 10
                    }
                });
            }
            else {
                res.json({
                    found: false,
                    barcode,
                    message: 'Product not found'
                });
            }
        }
        catch (error) {
            console.error('Barcode scan error:', error);
            res.status(500).json({
                error: 'Barcode scan failed',
                message: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    });
}
