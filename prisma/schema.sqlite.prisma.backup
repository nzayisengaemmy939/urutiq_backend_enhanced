generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // Note: Triggers and stored procedures are not supported in SQLite
  // We'll handle inventory updates in application code instead
}

model Company {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  legalName String?
  industry  String?
  taxId     String?
  country   String?   // ISO 3166-1 alpha-2
  currency  String?   // ISO 4217 code
  fiscalYearStart String?
  status    String   @default("active") // active, archived, deleted
  entityType String? // CORPORATION, LLC, PARTNERSHIP, SOLE_PROPRIETORSHIP, etc.
  
  // Branding Fields
  logoUrl   String?
  primaryColor String? @default("#009688") // Teal
  secondaryColor String? @default("#1565c0") // Deep Blue
  fontFamily String? @default("Inter")
  website   String?
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  postalCode String?
  zipCode   String?
  
  // Invoice Branding
  invoiceTemplate String? @default("modern") // modern, classic, minimal, professional
  invoiceFooter   String?
  invoiceTerms    String?
  showLogo        Boolean @default(true)
  showWebsite     Boolean @default(true)
  showAddress     Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  accountTypes AccountType[]
  journalEntries JournalEntry[]
  journalEntryTypes JournalEntryType[]
  journalEntryTemplates JournalEntryTemplate[]
  transactions   Transaction[]
  customers      Customer[]
  clients        Client[]
  documentShares DocumentShare[]
  vendors        Vendor[]
  invoices       Invoice[]
  estimates      Estimate[]
  recurringInvoices RecurringInvoice[]
  bills          Bill[]
  purchaseOrders PurchaseOrder[]
  expenseCategories ExpenseCategory[]
  budgets         Budget[]
  expenseRules    ExpenseRule[]
  
  // Enhanced Accounts Payable Relations
  invoiceCaptures InvoiceCapture[]
  invoiceMatchings InvoiceMatching[]
  goodsReceivedNotes GoodsReceivedNote[]
  invoiceApprovals InvoiceApproval[]
  paymentSchedules PaymentSchedule[]
  apReconciliations APReconciliation[]
  apReconciliationItems APReconciliationItem[]
  apWorkflows APWorkflow[]
  apWorkflowInstances APWorkflowInstance[]
  apWorkflowSteps APWorkflowStep[]
  approvalWorkflows ApprovalWorkflow[]
  importShipments ImportShipment[]
  bankAccounts   BankAccount[]
  payments       Payment[]
  products       Product[]
  locations      Location[]
  accountMappings AccountMapping[]
  aiAnomalyLogs  AiAnomalyLog[]
  aiInsights     AiInsight[]
  aiPredictions  AiPrediction[]
  aiRecommendations AiRecommendation[]
  aiAuditTrails  AiAuditTrail[]
  taxRates       TaxRate[]
  taxJurisdictions TaxJurisdiction[]
  taxForms       TaxForm[]
  taxCalendar    TaxCalendar[]
  taxCalculations TaxCalculation[]
  taxConfigurations TaxConfiguration[]
  reports        Report[]
  clientAccess   ClientPortalAccess[]
  messages       Message[]
  tasks          Task[]
  files          FileAsset[]
  documentCategories DocumentCategory[]
  documentWorkflows DocumentWorkflow[]
  documentActivities DocumentActivity[]
  documentAccessControls DocumentAccessControl[]
  documentWebhooks DocumentWebhook[]
  complianceChecks ComplianceCheck[]
  automatedReports AutomatedReport[]
  notifications  Notification[]
  workspaces     Workspace[]
  financialReports FinancialReport[]
  bankConnections BankConnection[]
  bankReconciliationRules BankReconciliationRule[]
  bankReconciliationJobs BankReconciliationJob[]
  companySettings CompanySetting[]
  approvals       Approval[]
  customReports  CustomReport[]
  aiConfigs      AIConfig[]
  aiModels       AIModel[]
  aiDataPipelines AIDataPipeline[]
  aiDataQuality  AIDataQuality[]
  aiPerformanceMetrics AIPerformanceMetrics[]
  aiLearningFeedback AILearningFeedback[]
  aiDriftDetection AIDriftDetection[]
  aiExperiments  AIExperiment[]
  aiDeployments  AIDeployment[]
  aiGovernance   AIGovernance[]
  aiGovernanceViolations AIGovernanceViolation[]
  aiModelTrainingRuns AIModelTrainingRun[]
  aiModelPredictions AIModelPrediction[]
  aiModelFeatureImportances AIModelFeatureImportance[]
  aiDataPipelineRuns AIDataPipelineRun[]
  // Card feeds
  cardTransactions CardTransaction[]
  cardExceptions   CardException[]
  expenses         Expense[]
  fixedAssetCategories FixedAssetCategory[]
  fixedAssets      FixedAsset[]
  fixedAssetDepreciations FixedAssetDepreciation[]
  creditNotes      CreditNote[]
  ocrReceipts      OCRReceipt[]
  
  // OAuth and API Management
  oauthClients     OAuthClient[]
  apiKeys          ApiKey[]
  apiUsageLogs     ApiUsageLog[]

  // Unified Approval System
  unifiedApprovalWorkflows UnifiedApprovalWorkflow[]
  unifiedApprovalRequests UnifiedApprovalRequest[]
  unifiedApprovalTemplates UnifiedApprovalTemplate[]
  unifiedApprovalNotificationSettings UnifiedApprovalNotificationSettings[]

  // AI Financial Coach Relations
  financialGoals FinancialGoal[]
  financialAdvice FinancialAdvice[]
  financialScenarios FinancialScenario[]
  learningProgress LearningProgress[]
  coachSessions CoachSession[]

  // Auto Bookkeeper Relations
  autoBookkeeperConfigs AutoBookkeeperConfig[]
  transactionCategorizations TransactionCategorization[]
  autoReconciliations AutoReconciliation[]

  @@index([tenantId])
}

model AiAnomalyLog {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  transactionId String?
  anomalyType   String   // fraud, duplicate, unusual_amount, missing_entry
  confidenceScore Decimal @default(0)
  status        String   @default("flagged") // flagged, resolved
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  @@index([tenantId, companyId])
}

model AiInsight {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  category    String   // cashflow, expenses, revenue, tax, compliance
  insightText String
  generatedAt DateTime @default(now())
  priority    String   @default("medium") // high, medium, low
  company     Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId])
}

model AiPrediction {
  id               String   @id @default(cuid())
  tenantId         String
  companyId        String
  predictionType   String   // cashflow, revenue, expenses, ar_aging, ap_aging
  predictedValue   Decimal
  predictionDate   DateTime
  confidenceLow    Decimal? 
  confidenceHigh   Decimal? 
  company          Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, predictionDate])
}

model AiRecommendation {
  id                  String   @id @default(cuid())
  tenantId            String
  companyId           String
  recommendationType  String   // tax_saving, cost_cutting, payment_timing
  recommendationText  String
  status              String   @default("pending") // applied, ignored, pending
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  company             Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId])
}

model AiAuditTrail {
  id                 String   @id @default(cuid())
  tenantId           String
  companyId          String
  userId             String?
  action             String
  aiValidationResult String?
  timestamp          DateTime @default(now())
  company            Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, timestamp])
}

// Missing models for advanced features
model BankRule {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  name        String
  description String?
  conditions  String   // JSON
  actions     String   // JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId])
}

model MfaMethod {
  id            String   @id @default(cuid())
  userId        String
  tenantId      String
  type          String   // sms, email, authenticator
  secret        String?
  name          String?
  isActive      Boolean  @default(true)
  setupComplete Boolean  @default(false)
  lastUsedAt    DateTime?
  backupCodes   String?  // JSON array of backup codes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId, tenantId])
}

model MfaCode {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  mfaMethodId String?
  code        String
  type        String   // verification, recovery
  expiresAt   DateTime
  used        Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())

  @@index([userId, tenantId])
  @@index([mfaMethodId])
}

model VoiceSettings {
  id              String   @id @default(cuid())
  userId          String
  tenantId        String
  companyId       String
  isEnabled       Boolean  @default(false)
  language        String   @default("en")
  voice           String   @default("default")
  speed           Float    @default(1.0)
  volume          Float    @default(1.0)
  wakeWord        String   @default("hey urutiq")
  commands        String?  // JSON array of voice commands
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([tenantId, companyId, userId])
  @@index([userId, tenantId, companyId])
}

model VoiceSession {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  companyId String
  sessionId String
  status    String   // active, completed, cancelled
  language  String?  // Session language
  startedAt DateTime @default(now())
  endedAt   DateTime?
  endTime   DateTime? // Alternative field name
  metadata  String?  // JSON

  @@index([userId, tenantId, companyId])
  @@index([sessionId])
}

model VoiceCommand {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  companyId   String
  sessionId   String
  command     String
  commandType String?  // Command type classification
  intent      String?
  entities    String?  // JSON
  confidence  Float?
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, tenantId, companyId, sessionId])
}

model Setting {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String?
  key       String
  value     String
  type      String   @default("string") // string, number, boolean, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, companyId, key])
}

model RevenueRecognitionSchedule {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  invoiceId         String?
  amount            Decimal
  recognizedAmount  Decimal  @default(0)
  recognitionDate   DateTime
  status            String   @default("pending") // pending, recognized, cancelled
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([tenantId, companyId])
}

model CloseChecklistItem {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  periodId    String
  period      String?  // Period reference
  item        String
  title       String?  // Item title
  order       Int?     // Display order
  completed   Boolean  @default(false)
  completedBy String?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId, periodId])
  @@index([tenantId, period])
  @@index([tenantId, order])
}

model RecurringJournalTemplate {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  name        String
  description String?
  frequency   String   // daily, weekly, monthly, quarterly, yearly
  template    String   // JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId])
}

model GoodsReceipt {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  poId        String?
  receiptNumber String
  receivedBy  String
  receivedAt  DateTime @default(now())
  status      String   @default("received") // received, verified, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId])
}

model CashFlowForecast {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  period      String   // YYYY-MM
  forecast    String   // JSON
  actual      String?  // JSON
  accuracy    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId, period])
}

model TaxFiling {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  formType    String
  period      String
  status      String   @default("draft") // draft, filed, accepted, rejected
  filedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId])
}

model JournalEntryLine {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  journalEntryId  String
  accountId       String
  debit           Decimal  @default(0)
  credit          Decimal  @default(0)
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId, companyId, journalEntryId])
}

// Financial Reporting Models
model ProfitAndLoss {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  period      String   // YYYY-MM
  totals      String?  // JSON string for totals
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId, period])
}

model CashFlowStatement {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  period      String   // YYYY-MM
  totals      String?  // JSON string for totals
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, companyId, period])
}

// Enhanced Tax Management Models
model TaxJurisdiction {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  name        String   // Federal, State, City, Province
  code        String   // US-FED, CA-ON, UK-VAT
  country     String   // US, CA, UK, etc.
  region      String?  // State/Province
  locality    String?  // City/County
  level       String   // federal, state, local
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company    @relation(fields: [companyId], references: [id])
  taxRates    TaxRate[]
  taxForms    TaxForm[]
  taxCalendar TaxCalendar[]
  
  @@unique([tenantId, companyId, code])
  @@index([tenantId, companyId])
}

model TaxRate {
  id              String          @id @default(cuid())
  tenantId        String
  companyId       String
  jurisdictionId  String
  taxName         String          // VAT, GST, Sales Tax, Income Tax
  taxType         String          // sales, income, payroll, property
  rate            Decimal         // Percentage rate (e.g., 0.15 for 15%)
  appliesTo       String          // products, services, all, income_brackets
  brackets        String?         // JSON string: Income tax brackets for progressive rates
  thresholds      String?         // JSON string: Minimum thresholds and exemptions
  isActive        Boolean         @default(true)
  effectiveFrom   DateTime
  effectiveTo     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  company         Company         @relation(fields: [companyId], references: [id])
  jurisdiction    TaxJurisdiction @relation(fields: [jurisdictionId], references: [id])
  calculations    TaxCalculation[]
  
  @@unique([tenantId, companyId, jurisdictionId, taxName, effectiveFrom])
  @@index([tenantId, companyId])
  @@index([effectiveFrom, effectiveTo])
}

model TaxForm {
  id              String          @id @default(cuid())
  tenantId        String
  companyId       String
  jurisdictionId  String
  formCode        String          // 1040, W-2, 1099, T4
  formName        String          // Individual Income Tax Return
  formType        String          // annual, quarterly, monthly
  formId          String?         // Alternative field name for id
  taxYear         Int
  dueDate         DateTime
  extendedDueDate DateTime?
  status          String          // draft, submitted, accepted, rejected
  filingMethod    String          // electronic, paper
  submittedAt     DateTime?
  acceptedAt      DateTime?
  filedAt         DateTime?       // Alternative field name for submittedAt
  rejectionReason String?          // Reason for rejection
  formData        String          // JSON string: Generated form data
  attachments     String?         // JSON string: Supporting documents
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  company         Company         @relation(fields: [companyId], references: [id])
  jurisdiction    TaxJurisdiction @relation(fields: [jurisdictionId], references: [id])
  submissions     TaxSubmission[]
  
  @@unique([tenantId, companyId, formCode, taxYear])
  @@index([tenantId, companyId])
  @@index([dueDate, status])
}

model TaxSubmission {
  id              String      @id @default(cuid())
  tenantId        String
  companyId       String
  formId          String
  submissionId    String?     // External system submission ID
  status          String      // pending, submitted, accepted, rejected, error
  submittedAt     DateTime
  acknowledgment  String?     // Confirmation number
  errors          String?     // JSON string: Validation errors
  response        String?     // JSON string: Full response from tax authority
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  form            TaxForm     @relation(fields: [formId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([submittedAt, status])
}

model TaxCalendar {
  id              String          @id @default(cuid())
  tenantId        String
  companyId       String
  jurisdictionId  String
  eventType       String          // filing_due, payment_due, estimated_payment
  title           String
  description     String?
  dueDate         DateTime
  formCodes       String          // JSON string array of related form codes
  amount          Decimal?        // Estimated amount due
  isRecurring     Boolean         @default(false)
  frequency       String?         // monthly, quarterly, annually
  isCompleted     Boolean         @default(false)
  completedAt     DateTime?
  reminderDays    String?         // JSON string array of reminder day integers
  priority        String          @default("medium") // low, medium, high, critical
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  company         Company         @relation(fields: [companyId], references: [id])
  jurisdiction    TaxJurisdiction @relation(fields: [jurisdictionId], references: [id])
  reminders       TaxReminder[]
  
  @@index([tenantId, companyId])
  @@index([dueDate, isCompleted])
}

model TaxReminder {
  id              String        @id @default(cuid())
  tenantId        String
  companyId       String
  calendarId      String
  reminderDate    DateTime
  reminderType    String        // email, sms, in_app
  status          String        // pending, sent, failed
  sentAt          DateTime?
  createdAt       DateTime      @default(now())
  
  calendar        TaxCalendar   @relation(fields: [calendarId], references: [id])
  
  @@index([reminderDate, status])
}

model TaxCalculation {
  id              String      @id @default(cuid())
  tenantId        String
  companyId       String
  taxRateId       String
  transactionId   String?     // Related transaction
  calculationType String      // real_time, batch, estimated
  baseAmount      Decimal     // Amount before tax
  taxAmount       Decimal     // Calculated tax amount
  effectiveRate   Decimal     // Actual rate applied
  exemptions      String?     // JSON string: Applied exemptions
  metadata        String?     // JSON string: Additional calculation data
  calculatedAt    DateTime    @default(now())
  jurisdiction    String?     // Tax jurisdiction
  periodStart     DateTime?   // Period start date
  netTaxLiability Decimal?    // Net tax liability
  inputTax        Decimal?    // Input tax amount
  outputTax       Decimal?    // Output tax amount
  totalSales      Decimal?    // Total sales amount
  
  company         Company     @relation(fields: [companyId], references: [id])
  taxRate         TaxRate     @relation(fields: [taxRateId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([calculatedAt])
}

model TaxConfiguration {
  id                    String   @id @default(cuid())
  tenantId              String
  companyId             String
  fiscalYearEnd         String   // MM-DD format
  taxIdNumber           String?  // EIN, TIN, etc.
  businessType          String   // corporation, llc, partnership, sole_proprietorship
  taxElections          String?  // JSON string: S-Corp election, etc.
  defaultTaxTreatment   String   // inclusive, exclusive
  roundingMethod        String   // round, floor, ceil
  roundingPrecision     Int      @default(2)
  enableEstimatedTax    Boolean  @default(false)
  enableAutoCalculation Boolean  @default(true)
  enableAutoFiling      Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  company               Company  @relation(fields: [companyId], references: [id])
  
  @@index([tenantId, companyId], map: "TaxConfiguration_tenant_company_idx")
}

model Report {
  id         String   @id @default(cuid())
  tenantId   String
  companyId  String
  reportType String   // P&L, Balance Sheet, Cash Flow, AR/AP Aging, Tax Summary
  parameters String?  // Report parameters as JSON string (date ranges, filters, etc.)
  generatedAt DateTime @default(now())
  fileUrl    String?  // URL to generated report file
  status     String   @default("generated") // generating, generated, failed
  createdBy  String?  // User ID who requested the report
  company    Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, reportType])
  @@index([tenantId, companyId, generatedAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String
  userId     String
  action     String   // login, logout, create, update, delete, view
  entityType String?  // Company, Invoice, Bill, etc.
  entityId   String?  // ID of the affected entity
  companyId  String?  // Company context
  entity     String?  // Entity data
  changes    String?  // Changes made (JSON)
  createdAt  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       AppUser  @relation(fields: [userId], references: [id])

  @@index([tenantId, userId, timestamp])
  @@index([tenantId, entityType, entityId])
  @@index([tenantId, companyId])
  @@index([tenantId, createdAt])
}

model AccountMapping {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  purpose   String   // AR, AP, CASH, INVENTORY, REVENUE, COGS, TAX_PAYABLE
  accountId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  account   Account  @relation(fields: [accountId], references: [id])

  @@unique([tenantId, companyId, purpose])
  @@index([tenantId, companyId])
}

model CompanySetting {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([tenantId, companyId, key])
  @@index([tenantId, companyId])
}

model BankAccount {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  bankName      String
  accountNumber String
  accountType   String   @default("checking") // checking, savings, credit, business_checking, business_savings, money_market, line_of_credit
  currency      String   @default("USD")
  balance       Decimal  @default(0)
  status        String   @default("active") // active, inactive, suspended, closed
  routingNumber String?  // Bank routing number
  swiftCode     String?  // SWIFT/BIC code for international transfers
  iban          String?  // International Bank Account Number
  accountHolder String?  // Name of account holder
  branchCode    String?  // Bank branch code
  branchName    String?  // Bank branch name
  lastSyncAt    DateTime? // Last time account data was synced
  notes         String?  // Additional notes about the account
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  transactions  BankTransaction[]
  payments      Payment[]
  billPayments  BillPayment[]
  paymentSchedules PaymentSchedule[]

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, accountType])
}

// Real-time Bank Feeds Models

model BankTransaction {
  id                String   @id @default(cuid())
  tenantId          String
  bankAccountId     String?  // Direct bank account reference
  connectionId      String?  // Bank connection reference (for real-time feeds)
  externalId        String?  // External transaction ID from bank
  transactionDate   DateTime
  postedDate        DateTime?
  amount            Decimal
  currency          String   @default("USD")
  description       String?
  merchantName      String?
  merchantCategory  String?
  transactionType   String   // debit, credit, transfer
  reference         String?
  checkNumber       String?
  memo              String?
  category          String?  // Auto-categorized by AI
  subcategory       String?  // Sub-category for detailed classification
  tags              String?  // Comma-separated tags
  status            String   @default("unreconciled") // unreconciled, reconciled, pending, failed
  isReconciled      Boolean  @default(false)
  reconciledAt      DateTime?
  reconciledBy      String?
  matchedTransactionId String? // ID of matched internal transaction
  confidence        Decimal  @default(0) // AI matching confidence
  fees              Decimal  @default(0) // Transaction fees
  bankConnectionId  String?  // Alternative field name for connectionId
  date              DateTime? // Alternative field name for transactionDate
  exchangeRate      Decimal? // Exchange rate if different currency
  originalAmount    Decimal? // Original amount in different currency
  originalCurrency  String?  // Original currency
  location          String?  // Transaction location
  authorizationCode String? // Authorization code
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  bankAccount       BankAccount? @relation(fields: [bankAccountId], references: [id])
  connection        BankConnection? @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  reconciledByUser  AppUser? @relation("BankTransactionReconciler", fields: [reconciledBy], references: [id])
  matchedTransaction Transaction? @relation(fields: [matchedTransactionId], references: [id])
  payment           Payment?
  
  @@index([tenantId, bankAccountId])
  @@index([tenantId, connectionId])
  @@index([transactionDate])
  @@index([status])
  @@index([isReconciled])
  @@index([externalId])
  @@index([tenantId, status])
  @@unique([connectionId, externalId])
}

model BankSyncLog {
  id            String   @id @default(cuid())
  connectionId  String
  syncType      String   // full, incremental, manual
  status        String   // success, error, partial
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  transactionsFound Int   @default(0)
  transactionsImported Int @default(0)
  transactionsUpdated Int @default(0)
  errorMessage  String?
  metadata      String?  // Additional sync metadata
  
  // Relations
  connection    BankConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  
  @@index([connectionId])
  @@index([startedAt])
  @@index([status])
}

model BankReconciliationRule {
  id            String   @id @default(cuid())
  companyId     String
  name          String
  description   String?
  isActive      Boolean  @default(true)
  priority      Int      @default(0) // Higher priority rules are applied first
  conditions    String   // JSON string for matching conditions
  actions       String   // JSON string for actions to take
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser AppUser  @relation("BankReconciliationRuleCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([companyId])
  @@index([isActive])
  @@index([priority])
}

model BankReconciliationJob {
  id            String   @id @default(cuid())
  companyId     String
  connectionId  String?
  jobType       String   // auto, manual, scheduled
  status        String   @default("pending") // pending, running, completed, failed
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  transactionsProcessed Int @default(0)
  transactionsMatched Int @default(0)
  transactionsUnmatched Int @default(0)
  errorMessage  String?
  metadata      String?  // Additional job metadata
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  connection    BankConnection? @relation("BankReconciliationJobConnection", fields: [connectionId], references: [id])
  
  @@index([companyId])
  @@index([connectionId])
  @@index([startedAt])
  @@index([status])
}

model Payment {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  transactionId String
  method        String
  reference     String?
  amount        Decimal
  paymentDate   DateTime
  bankAccountId String?  // Optional bank account for cash/check payments
  bankTransactionId String? @unique // Link to bank transaction if created automatically
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankTransaction BankTransaction? @relation(fields: [bankTransactionId], references: [id])
  applications  PaymentApplication[]

  @@index([tenantId, companyId])
  @@index([tenantId, bankAccountId])
}

model PaymentApplication {
  id         String   @id @default(cuid())
  tenantId   String
  paymentId  String
  invoiceId  String?
  billId     String?
  amount     Decimal
  createdAt  DateTime @default(now())
  payment    Payment  @relation(fields: [paymentId], references: [id])
  invoice    Invoice? @relation(fields: [invoiceId], references: [id])
  bill       Bill?    @relation(fields: [billId], references: [id])

  @@index([tenantId, paymentId])
  @@index([tenantId, invoiceId])
  @@index([tenantId, billId])
}

model AppUser {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  name      String?
  role      String   // admin | accountant | auditor | employee
  passwordHash String?
  passwordSalt String?
  mfaEnabled Boolean  @default(false)
  mfaSecret  String?
  mfaBackupCodes String? // Comma-separated hashed codes
  mfaEnabledAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auditLogs AuditLog[]
  clientAccess ClientPortalAccess[]
  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  assignedTasks Task[]
  files        FileAsset[]
  documentWorkflows DocumentWorkflow[]
  documentActivities DocumentActivity[]
  accessControls DocumentAccessControl[] @relation("AccessControlCreator")
  webhooks DocumentWebhook[] @relation("WebhookCreator")
  complianceChecks ComplianceCheck[] @relation("ComplianceCheckCreator")
  automatedReports AutomatedReport[] @relation("AutomatedReportCreator")
  notifications Notification[]
  workspaceMemberships WorkspaceMember[]
  refreshTokens RefreshToken[]
  financialReports FinancialReport[]
  reportExecutions ReportExecution[]
  reportTemplates ReportTemplate[]
  reconciledByBankTransactions BankTransaction[] @relation("BankTransactionReconciler")
  bankReconciliationRuleCreator BankReconciliationRule[] @relation("BankReconciliationRuleCreator")
  approvals Approval[] @relation("ApprovalApprover")
  customReports CustomReport[]
  aiLearningFeedback AILearningFeedback[]
  aiGovernance AIGovernance[]
  aiGovernanceViolations AIGovernanceViolation[] @relation("AIGovernanceViolationResolver")
  
  // OAuth Relations
  authorizationCodes OAuthAuthorizationCode[]
  accessTokens       OAuthAccessToken[]
  oauthRefreshTokens OAuthRefreshToken[] @relation("OAuthRefreshTokens")
  createdApiKeys     ApiKey[]
  
  // Enhanced Sales Relations
  invoiceCreator Invoice[] @relation("InvoiceCreator")
  invoiceApprover Invoice[] @relation("InvoiceApprover")
  invoiceModifier Invoice[] @relation("InvoiceModifier")
  invoiceActivities InvoiceActivity[] @relation("InvoiceActivityUser")
  invoiceAttachmentUploader InvoiceAttachment[] @relation("InvoiceAttachmentUploader")
  invoiceReminderSender InvoiceReminder[] @relation("InvoiceReminderSender")
  
  estimateCreator Estimate[] @relation("EstimateCreator")
  estimateApprover Estimate[] @relation("EstimateApprover")
  estimateModifier Estimate[] @relation("EstimateModifier")
  estimateActivities EstimateActivity[] @relation("EstimateActivityUser")
  estimateAttachmentUploader EstimateAttachment[] @relation("EstimateAttachmentUploader")
  estimateReminderSender EstimateReminder[] @relation("EstimateReminderSender")
  
  customerAssignedUser Customer[] @relation("CustomerAssignedUser")
  customerActivities CustomerActivity[] @relation("CustomerActivityUser")
  
  // Client Relations
  clientAssignedUser Client[] @relation("ClientAssignedUser")
  
  // Document Relations
  documentShares DocumentShare[] @relation("DocumentShareUser")
  sharedDocuments DocumentShare[] @relation("DocumentSharedBy")
  
  // Credit Note Relations
  creditNoteApprover CreditNote[] @relation("CreditNoteApprover")
  creditNoteRejector CreditNote[] @relation("CreditNoteRejector")
  creditNoteApplier CreditNote[] @relation("CreditNoteApplier")
  journalEntriesCreated JournalEntry[] @relation("JournalEntryCreator")
  journalEntryApprovalsRequested JournalEntryApproval[] @relation("JournalEntryApprovalRequester")
  journalEntryApprovalsApproved JournalEntryApproval[] @relation("JournalEntryApprovalApprover")
  journalEntryAudits JournalEntryAudit[]
  journalSearches JournalSearch[]

  // Unified Approval System Relations
  unifiedApprovalAssignees UnifiedApprovalAssignee[] @relation("UnifiedApprovalAssignee")
  unifiedApprovalNotificationSettings UnifiedApprovalNotificationSettings[] @relation("UnifiedApprovalNotificationSettings")

  @@index([tenantId])
  @@unique([tenantId, email])
}

model RefreshToken {
  id         String   @id @default(cuid())
  tenantId   String
  userId     String
  token      String   @unique
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())
  user       AppUser  @relation(fields: [userId], references: [id])

  @@index([tenantId, userId])
}

// Chart of Accounts
model AccountType {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String?
  code      String   // e.g., ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]

  company   Company? @relation(fields: [companyId], references: [id])

  @@index([tenantId])
  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, code])
}

model Account {
  id           String      @id @default(cuid())
  tenantId     String
  companyId    String
  code         String      // e.g., 1000 Cash
  name         String
  typeId       String
  type         AccountType @relation(fields: [typeId], references: [id])
  company      Company     @relation(fields: [companyId], references: [id])
  parentId     String?
  parent       Account?    @relation("AccountChildren", fields: [parentId], references: [id])
  children     Account[]   @relation("AccountChildren")
  isActive     Boolean     @default(true)
  balance      Decimal     @default(0) // Current account balance
  accountType  String?     // Additional field for account type
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  journalLines JournalLine[]
  accountMappings AccountMapping[]
  journalEntryTypeAccounts JournalEntryTypeAccount[]
  journalEntryTemplateLines JournalEntryTemplateLine[]
  expenses     Expense[]   @relation("ExpenseAccount")
  billLineItems BillLineItem[]

  @@index([tenantId])
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, parentId])
  @@unique([tenantId, companyId, code])
}

// Enhanced Journal Entries Hub Models

// Journal Entry Types (Sales, Expenses, Adjustments, etc.)
model JournalEntryType {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  name              String
  description       String?
  category          String   // SALES, EXPENSE, ADJUSTMENT, TRANSFER, DEPRECIATION, ACCRUAL, REVERSAL, CUSTOM
  isSystemGenerated Boolean  @default(false)
  requiresApproval  Boolean  @default(false)
  maxAmount         Decimal?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  entries           JournalEntry[]
  templates         JournalEntryTemplate[]
  allowedAccounts   JournalEntryTypeAccount[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, category])
  @@unique([tenantId, companyId, name])
}

// Allowed accounts for each entry type
model JournalEntryTypeAccount {
  id          String           @id @default(cuid())
  tenantId    String
  entryTypeId String
  accountId   String
  createdAt   DateTime         @default(now())
  
  // Relations
  entryType   JournalEntryType @relation(fields: [entryTypeId], references: [id], onDelete: Cascade)
  account     Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, entryTypeId, accountId])
  @@index([tenantId, entryTypeId])
}

// Journal Entry Templates
model JournalEntryTemplate {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  name          String
  description   String?
  entryTypeId   String?
  isRecurring   Boolean  @default(false)
  frequency     String?  // DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  nextRunDate   DateTime?
  endDate       DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  entryType     JournalEntryType? @relation(fields: [entryTypeId], references: [id])
  lines         JournalEntryTemplateLine[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, isRecurring])
  @@index([tenantId, companyId, nextRunDate])
}

// Template lines
model JournalEntryTemplateLine {
  id            String   @id @default(cuid())
  tenantId      String
  templateId    String
  accountId     String
  debitFormula  String?  // Formula for calculating debit amount
  creditFormula String?  // Formula for calculating credit amount
  memo          String?
  department    String?
  project       String?
  location      String?
  isRequired    Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  // Relations
  template      JournalEntryTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  account       Account             @relation(fields: [accountId], references: [id])
  
  @@index([tenantId, templateId])
  @@index([tenantId, accountId])
}

// Enhanced Journal Entry
model JournalEntry {
  id          String       @id @default(cuid())
  tenantId    String
  companyId   String?
  entryTypeId String?
  date        DateTime
  memo        String?
  reference   String?
  status      String       @default("DRAFT") // DRAFT, POSTED, REVERSED, PENDING_APPROVAL
  postedAt    DateTime?
  createdAt   DateTime     @default(now())
  createdById String?
  lines       JournalLine[]
  company     Company?     @relation(fields: [companyId], references: [id])
  entryType   JournalEntryType? @relation(fields: [entryTypeId], references: [id])
  createdBy   AppUser?     @relation("JournalEntryCreator", fields: [createdById], references: [id])
  transactions Transaction[]
  fixedAssetDepreciations FixedAssetDepreciation[]
  approvals   JournalEntryApproval[]
  auditTrail  JournalEntryAudit[]
  bills       Bill[]
  billPayments BillPayment[]

  @@index([tenantId, date])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, entryTypeId])
  @@index([tenantId, createdById])
}

model JournalLine {
  id         String        @id @default(cuid())
  tenantId   String
  entryId    String
  entry      JournalEntry  @relation(fields: [entryId], references: [id])
  accountId  String
  account    Account       @relation(fields: [accountId], references: [id])
  debit      Decimal       @default(0)
  credit     Decimal       @default(0)
  memo       String?
  // Dimensions
  department String?
  project    String?
  location   String?

  @@index([tenantId, accountId])
  @@index([tenantId, department])
  @@index([tenantId, project])
  @@index([tenantId, location])
}

// Journal Entry Approval Workflow
model JournalEntryApproval {
  id            String   @id @default(cuid())
  tenantId      String
  entryId       String
  requestedById String
  approvedById  String?
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  requestedAt   DateTime @default(now())
  approvedAt    DateTime?
  comments      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  entry         JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  requestedBy   AppUser      @relation("JournalEntryApprovalRequester", fields: [requestedById], references: [id])
  approver      AppUser?     @relation("JournalEntryApprovalApprover", fields: [approvedById], references: [id])
  
  @@index([tenantId, entryId])
  @@index([tenantId, status])
  @@index([tenantId, requestedById])
  @@index([tenantId, approvedById])
}

// Journal Entry Audit Trail
model JournalEntryAudit {
  id          String   @id @default(cuid())
  tenantId    String
  entryId     String
  userId      String
  action      String   // CREATED, UPDATED, POSTED, REVERSED, APPROVED, REJECTED
  oldValues   String?  // Previous values for updates (JSON string)
  newValues   String?  // New values for updates (JSON string)
  comments    String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  entry       JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  user        AppUser      @relation(fields: [userId], references: [id])
  
  @@index([tenantId, entryId])
  @@index([tenantId, userId])
  @@index([tenantId, action])
  @@index([tenantId, createdAt])
}

// Saved Search Queries
model JournalSearch {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  filters     String   // JSON string of search filters
  isPublic    Boolean  @default(false)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy AppUser @relation(fields: [createdById], references: [id])

  @@unique([tenantId, name, createdById])
  @@index([tenantId, createdById])
  @@map("journal_searches")
}


model Transaction {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String?
  transactionType String
  amount        Decimal
  currency      String
  transactionDate DateTime
  status        String
  description   String?  // Transaction description
  category      String?  // Transaction category
  createdById   String?  // User who created the transaction
  linkedJournalEntryId String?
  linkedJournalEntry   JournalEntry? @relation(fields: [linkedJournalEntryId], references: [id])
  company       Company? @relation(fields: [companyId], references: [id])
  payments      Payment[]
  aiAnomalies   AiAnomalyLog[]
  bankTransactions BankTransaction[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, companyId])
  @@index([tenantId, transactionDate])
}

model Customer {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  name      String
  email     String?
  phone     String?
  taxNumber String?
  address   String?
  
  // Enhanced Customer Fields
  customerCode String? // Internal customer code/ID
  customerType String  @default("individual") // individual, business, government
  
  // Contact Information
  primaryContact String? // Primary contact person
  billingEmail  String? // Separate billing email
  billingPhone  String? // Separate billing phone
  
  // Address Details
  billingAddress String? // Separate billing address
  shippingAddress String? // Shipping address
  city          String?
  state         String?
  postalCode    String?
  country       String? // ISO 3166-1 alpha-2
  
  // Business Information
  businessName  String? // Legal business name
  industry      String? // Industry classification
  website       String?
  registrationNumber String? // Business registration number
  
  // Financial Information
  creditLimit   Decimal? // Credit limit
  paymentTerms  String? // Default payment terms
  currency      String? // Preferred currency
  taxExempt     Boolean @default(false) // Tax exemption status
  taxExemptionReason String? // Reason for tax exemption
  
  // Customer Status and Classification
  status        String  @default("active") // active, inactive, suspended, archived
  customerTier  String? // bronze, silver, gold, platinum
  source        String? // How customer was acquired
  assignedTo    String? // Sales rep assigned
  
  // Communication Preferences
  emailOptIn    Boolean @default(true) // Email marketing opt-in
  smsOptIn      Boolean @default(false) // SMS notifications opt-in
  preferredContactMethod String? // email, phone, sms
  
  // Notes and Tags
  notes         String? // Internal notes
  tags          String? // Comma-separated tags
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastContactAt DateTime? // Last contact date
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  invoices      Invoice[]
  estimates     Estimate[]
  recurringInvoices RecurringInvoice[]
  contacts      CustomerContact[]
  addresses     CustomerAddress[]
  activities    CustomerActivity[]
  creditNotes   CreditNote[]
  
  // User Relations
  assignedUser  AppUser? @relation("CustomerAssignedUser", fields: [assignedTo], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, customerType])
  @@index([tenantId, companyId, customerTier])
  @@index([tenantId, assignedTo])
  @@index([tenantId, email])
  @@index([tenantId, customerCode])
}

// Client Portal Management
model Client {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  
  // Basic Information
  name      String
  email     String   @unique
  phone     String?
  
  // Business Information
  businessName    String?
  contactPerson   String?
  industry        String?
  website         String?
  
  // Address Information
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String? // ISO 3166-1 alpha-2
  
  // Financial Information
  currency        String? @default("USD") // ISO 4217 code
  paymentTerms    String? // Net 30, Net 15, etc.
  creditLimit     Decimal?
  taxNumber       String?
  
  // Portal Access
  hasPortalAccess Boolean @default(true)
  lastLoginAt     DateTime?
  isActive        Boolean @default(true)
  
  // Communication Preferences
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  preferredLanguage  String? @default("en")
  
  // Metadata
  notes           String?
  tags            String? // JSON array of tags
  source          String? // How client was acquired
  assignedTo      String? // User ID of assigned account manager
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company @relation(fields: [companyId], references: [id])
  assignedUser    AppUser? @relation("ClientAssignedUser", fields: [assignedTo], references: [id])
  
  // Portal access records
  portalAccessRecords ClientPortalAccess[]
  
  // Document shares
  sharedDocuments DocumentShare[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, isActive])
  @@index([tenantId, email])
  @@index([tenantId, assignedTo])
  @@unique([tenantId, email])
}

// Enhanced Customer Related Models
model CustomerContact {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  name        String
  title       String? // Job title
  email       String?
  phone       String?
  mobile      String?
  isPrimary   Boolean @default(false) // Primary contact
  department  String? // Department
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  
  @@index([tenantId, customerId])
  @@index([tenantId, isPrimary])
}

model CustomerAddress {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  addressType String   // billing, shipping, mailing, other
  address1    String
  address2    String?
  city        String
  state       String?
  postalCode  String?
  country     String? // ISO 3166-1 alpha-2
  isDefault   Boolean @default(false) // Default address for this type
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  
  @@index([tenantId, customerId])
  @@index([tenantId, addressType])
  @@index([tenantId, isDefault])
}

model CustomerActivity {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  activityType String  // call, email, meeting, note, task, etc.
  subject     String
  description String?
  activityDate DateTime
  performedBy String? // User ID who performed the activity
  duration    Int?    // Duration in minutes
  outcome     String? // Result of the activity
  followUpRequired Boolean @default(false)
  followUpDate DateTime?
  createdAt   DateTime @default(now())
  
  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  user        AppUser? @relation("CustomerActivityUser", fields: [performedBy], references: [id])
  
  @@index([tenantId, customerId])
  @@index([tenantId, activityType])
  @@index([tenantId, activityDate])
  @@index([tenantId, performedBy])
}

model Vendor {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  name      String
  email     String?
  phone     String?
  taxNumber String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  bills     Bill[]
  purchaseOrders PurchaseOrder[]
  expenses  Expense[]
  invoiceCaptures InvoiceCapture[]

  @@index([tenantId, companyId])
}

model Invoice {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  customerId    String
  invoiceNumber String
  issueDate     DateTime
  dueDate       DateTime?
  status        String     @default("draft") // draft, sent, viewed, paid, overdue, cancelled, refunded
  totalAmount   Decimal    @default(0)
  balanceDue    Decimal    @default(0)
  
  // Enhanced Invoice Fields
  currency      String     @default("USD")
  exchangeRate  Decimal?   // Exchange rate at time of invoice creation
  subtotal      Decimal    @default(0) // Amount before tax and discounts
  taxAmount     Decimal    @default(0) // Total tax amount
  discountAmount Decimal   @default(0) // Total discount amount
  shippingAmount Decimal   @default(0) // Shipping costs
  notes         String?    // Internal notes
  terms         String?    // Payment terms
  footer        String?    // Footer text
  
  // Payment and Collection
  paymentTerms  String?    // Net 30, Due on Receipt, etc.
  lateFeeRate   Decimal?   // Late fee percentage
  lateFeeAmount Decimal   @default(0) // Calculated late fee
  collectionStatus String? // active, in_collection, written_off
  
  // Delivery and Communication
  deliveryMethod String?   // email, mail, portal, api
  sentAt        DateTime?   // When invoice was sent
  viewedAt      DateTime?   // When customer first viewed
  lastViewedAt  DateTime?   // Last time customer viewed
  reminderCount Int        @default(0) // Number of reminders sent
  
  // Approval and Workflow
  approvalStatus String    @default("none") // none, pending, approved, rejected
  approvedBy     String?   // User ID who approved
  approvedAt     DateTime?
  rejectionReason String?   // Reason for rejection
  
  // Estimates and Quotes
  estimateId    String?    @unique // Related estimate if converted
  estimate      Estimate?  @relation("EstimateToInvoice", fields: [estimateId], references: [id])
  
  // Recurring Invoice
  recurringInvoice RecurringInvoice? @relation("RecurringInvoiceGenerated", fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId String?
  
  // Credit Notes and Refunds
  creditNoteId  String?    // Related credit note
  refundAmount  Decimal    @default(0) // Total refunded amount
  refundStatus  String?    // none, partial, full
  
  // Multi-currency Support
  customerCurrency String? // Customer's preferred currency
  customerExchangeRate Decimal? // Exchange rate for customer currency
  
  // Tax Information
  taxInclusive  Boolean    @default(false) // Whether prices include tax
  taxExemptionReason String? // Reason for tax exemption
  
  // Document Management
  pdfGenerated  Boolean    @default(false)
  pdfGeneratedAt DateTime?
  pdfUrl        String?    // URL to generated PDF
  
  // Activity Tracking
  createdBy     String?    // User who created the invoice
  lastModifiedBy String?   // User who last modified
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  company       Company    @relation(fields: [companyId], references: [id])
  customer      Customer   @relation(fields: [customerId], references: [id])
  lines         InvoiceLine[]
  applications  PaymentApplication[]
  activities    InvoiceActivity[]
  attachments   InvoiceAttachment[]
  payments      InvoicePayment[]
  reminders     InvoiceReminder[]
  creditNotes   CreditNote[]
  
  // User Relations
  creator       AppUser?   @relation("InvoiceCreator", fields: [createdBy], references: [id])
  approver      AppUser?   @relation("InvoiceApprover", fields: [approvedBy], references: [id])
  modifier      AppUser?   @relation("InvoiceModifier", fields: [lastModifiedBy], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, issueDate])
  @@index([tenantId, companyId, dueDate])
  @@index([tenantId, customerId])
  @@index([tenantId, estimateId])
  @@index([tenantId, recurringInvoiceId])
  @@index([tenantId, createdBy])
  @@unique([tenantId, companyId, invoiceNumber])
}

model InvoiceLine {
  id          String   @id @default(cuid())
  tenantId    String
  invoiceId   String
  productId   String?
  description String?
  quantity    Decimal  @default(1)
  unitPrice   Decimal  @default(0)
  taxRate     Decimal  @default(0)
  lineTotal   Decimal  @default(0)
  
  // Enhanced Line Fields
  lineNumber  Int?     // Line number for ordering
  productCode String?   // Product SKU/code
  unitOfMeasure String? // Each, Hour, Kg, etc.
  
  // Pricing Details
  discountRate Decimal @default(0) // Discount percentage
  discountAmount Decimal @default(0) // Discount amount
  taxAmount    Decimal @default(0) // Tax amount for this line
  netAmount    Decimal @default(0) // Amount after discount, before tax
  
  // Tax Information
  taxCode      String? // Tax code for this line
  taxExempt    Boolean @default(false) // Whether this line is tax exempt
  taxExemptionReason String? // Reason for tax exemption
  
  // Additional Information
  notes        String? // Line-specific notes
  deliveryDate DateTime? // Expected delivery date
  warranty     String? // Warranty information
  
  // Cost Tracking
  costPrice    Decimal? // Cost price for margin calculation
  margin       Decimal? // Calculated margin percentage
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  // Relations
  invoice      Invoice  @relation(fields: [invoiceId], references: [id])
  product      Product? @relation(fields: [productId], references: [id])

  @@index([tenantId, invoiceId])
  @@index([tenantId, productId])
}

// Enhanced Invoice Related Models
model InvoiceActivity {
  id          String   @id @default(cuid())
  tenantId    String
  invoiceId   String
  activityType String  // created, sent, viewed, paid, reminder_sent, status_changed, etc.
  description String?
  performedBy String?  // User ID who performed the action
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  
  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  user        AppUser? @relation("InvoiceActivityUser", fields: [performedBy], references: [id])
  
  @@index([tenantId, invoiceId])
  @@index([tenantId, activityType])
  @@index([tenantId, createdAt])
}

model InvoiceAttachment {
  id          String   @id @default(cuid())
  tenantId    String
  invoiceId   String
  fileName    String
  fileSize    Int
  mimeType    String
  fileUrl     String   // URL to stored file
  uploadedBy  String   // User ID who uploaded
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  uploader    AppUser  @relation("InvoiceAttachmentUploader", fields: [uploadedBy], references: [id])
  
  @@index([tenantId, invoiceId])
  @@index([tenantId, uploadedBy])
}

model InvoicePayment {
  id          String   @id @default(cuid())
  tenantId    String
  invoiceId   String
  paymentId   String   // Reference to Payment model
  amount      Decimal
  paymentDate DateTime
  paymentMethod String // cash, check, credit_card, bank_transfer, etc.
  reference   String?  // Check number, transaction ID, etc.
  notes       String?
  createdAt   DateTime @default(now())
  
  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  
  @@index([tenantId, invoiceId])
  @@index([tenantId, paymentDate])
}

model InvoiceReminder {
  id          String   @id @default(cuid())
  tenantId    String
  invoiceId   String
  reminderType String   // email, sms, letter, call
  sentAt      DateTime
  sentBy      String?   // User ID who sent reminder
  templateId  String?   // Email template used
  status      String    @default("sent") // sent, failed, bounced
  response    String?   // Customer response if any
  createdAt   DateTime @default(now())
  
  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  sender      AppUser? @relation("InvoiceReminderSender", fields: [sentBy], references: [id])
  
  @@index([tenantId, invoiceId])
  @@index([tenantId, sentAt])
}

model Estimate {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  customerId    String
  estimateNumber String
  issueDate     DateTime
  expiryDate    DateTime?
  status        String     @default("draft") // draft, sent, viewed, accepted, rejected, expired, converted
  totalAmount   Decimal    @default(0)
  currency      String     @default("USD")
  notes         String?
  terms         String?
  validUntil    DateTime?
  
  // Enhanced Estimate Fields
  subtotal      Decimal    @default(0) // Amount before tax and discounts
  taxAmount     Decimal    @default(0) // Total tax amount
  discountAmount Decimal   @default(0) // Total discount amount
  exchangeRate  Decimal?   // Exchange rate at time of estimate creation
  
  // Customer Communication
  sentAt        DateTime?   // When estimate was sent
  viewedAt      DateTime?   // When customer first viewed
  lastViewedAt  DateTime?   // Last time customer viewed
  reminderCount Int        @default(0) // Number of reminders sent
  
  // Conversion Tracking
  convertedToInvoiceId String?
  convertedAt         DateTime? // When estimate was converted to invoice
  conversionNotes     String?   // Notes about conversion
  
  // Approval and Workflow
  approvalStatus String    @default("none") // none, pending, approved, rejected
  approvedBy     String?   // User ID who approved
  approvedAt     DateTime?
  rejectionReason String?   // Reason for rejection
  
  // Customer Response
  customerResponse String? // Customer's response/feedback
  responseDate    DateTime? // When customer responded
  
  // Document Management
  pdfGenerated  Boolean    @default(false)
  pdfGeneratedAt DateTime?
  pdfUrl        String?    // URL to generated PDF
  
  // Activity Tracking
  createdBy     String?    // User who created the estimate
  lastModifiedBy String?   // User who last modified
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  company       Company    @relation(fields: [companyId], references: [id])
  customer      Customer   @relation(fields: [customerId], references: [id])
  lines         EstimateLine[]
  activities    EstimateActivity[]
  attachments   EstimateAttachment[]
  reminders     EstimateReminder[]
  convertedInvoice Invoice? @relation("EstimateToInvoice")
  
  // User Relations
  creator       AppUser?   @relation("EstimateCreator", fields: [createdBy], references: [id])
  approver      AppUser?   @relation("EstimateApprover", fields: [approvedBy], references: [id])
  modifier      AppUser?   @relation("EstimateModifier", fields: [lastModifiedBy], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, issueDate])
  @@index([tenantId, customerId])
  @@index([tenantId, createdBy])
  @@unique([tenantId, companyId, estimateNumber])
}

model EstimateLine {
  id          String   @id @default(cuid())
  tenantId    String
  estimateId  String
  productId   String?
  description String?
  quantity    Decimal  @default(1)
  unitPrice   Decimal  @default(0)
  taxRate     Decimal  @default(0)
  lineTotal   Decimal  @default(0)
  
  // Enhanced Line Fields
  lineNumber  Int?     // Line number for ordering
  productCode String?   // Product SKU/code
  unitOfMeasure String? // Each, Hour, Kg, etc.
  
  // Pricing Details
  discountRate Decimal @default(0) // Discount percentage
  discountAmount Decimal @default(0) // Discount amount
  taxAmount    Decimal @default(0) // Tax amount for this line
  netAmount    Decimal @default(0) // Amount after discount, before tax
  
  // Tax Information
  taxCode      String? // Tax code for this line
  taxExempt    Boolean @default(false) // Whether this line is tax exempt
  taxExemptionReason String? // Reason for tax exemption
  
  // Additional Information
  notes        String? // Line-specific notes
  deliveryDate DateTime? // Expected delivery date
  warranty     String? // Warranty information
  
  // Cost Tracking
  costPrice    Decimal? // Cost price for margin calculation
  margin       Decimal? // Calculated margin percentage
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  
  // Relations
  estimate     Estimate @relation(fields: [estimateId], references: [id])
  product      Product? @relation(fields: [productId], references: [id])

  @@index([tenantId, estimateId])
  @@index([tenantId, productId])
}

// Enhanced Estimate Related Models
model EstimateActivity {
  id          String   @id @default(cuid())
  tenantId    String
  estimateId  String
  activityType String  // created, sent, viewed, accepted, rejected, converted, etc.
  description String?
  performedBy String?  // User ID who performed the action
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  
  // Relations
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  user        AppUser? @relation("EstimateActivityUser", fields: [performedBy], references: [id])
  
  @@index([tenantId, estimateId])
  @@index([tenantId, activityType])
  @@index([tenantId, createdAt])
}

model EstimateAttachment {
  id          String   @id @default(cuid())
  tenantId    String
  estimateId  String
  fileName    String
  fileSize    Int
  mimeType    String
  fileUrl     String   // URL to stored file
  uploadedBy  String   // User ID who uploaded
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  uploader    AppUser  @relation("EstimateAttachmentUploader", fields: [uploadedBy], references: [id])
  
  @@index([tenantId, estimateId])
  @@index([tenantId, uploadedBy])
}

model EstimateReminder {
  id          String   @id @default(cuid())
  tenantId    String
  estimateId  String
  reminderType String   // email, sms, letter, call
  sentAt      DateTime
  sentBy      String?   // User ID who sent reminder
  templateId  String?   // Email template used
  status      String    @default("sent") // sent, failed, bounced
  response    String?   // Customer response if any
  createdAt   DateTime @default(now())
  
  // Relations
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  sender      AppUser? @relation("EstimateReminderSender", fields: [sentBy], references: [id])
  
  @@index([tenantId, estimateId])
  @@index([tenantId, sentAt])
}

model RecurringInvoice {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  customerId      String
  name            String   // Template name
  description     String?
  frequency       String   // daily, weekly, monthly, quarterly, yearly, custom
  interval        Int      @default(1) // Every X frequency units
  startDate       DateTime
  endDate         DateTime?
  nextRunDate     DateTime
  lastRunDate     DateTime?
  status          String   @default("active") // active, paused, completed, cancelled
  totalAmount     Decimal  @default(0)
  currency        String   @default("USD")
  notes           String?
  terms           String?
  dueDateOffset   Int      @default(30) // Days after issue date
  autoSend        Boolean  @default(false)
  emailTemplate   String?
  
  // Advanced Scheduling
  dayOfWeek       Int?     // 0-6 for weekly (0=Sunday)
  dayOfMonth      Int?     // 1-31 for monthly
  businessDaysOnly Boolean @default(false)
  skipHolidays    Boolean  @default(false)
  timezone        String   @default("UTC")
  
  // Conditional Logic
  skipIfOutstandingBalance Boolean @default(false)
  maxOutstandingAmount     Decimal?
  skipIfCustomerInactive   Boolean @default(false)
  requireApproval          Boolean @default(false)
  approvalWorkflowId       String?
  
  // Email Settings
  ccEmails        String?  // JSON array of CC emails
  bccEmails       String?  // JSON array of BCC emails
  reminderDays    String?  // JSON array of reminder days before due date
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id])
  customer        Customer @relation(fields: [customerId], references: [id])
  lines           RecurringInvoiceLine[]
  generatedInvoices Invoice[] @relation("RecurringInvoiceGenerated")

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, nextRunDate])
}

model RecurringInvoiceLine {
  id                String         @id @default(cuid())
  tenantId          String
  recurringInvoiceId String
  productId         String?
  description       String?
  quantity          Decimal        @default(1)
  unitPrice         Decimal        @default(0)
  taxRate           Decimal        @default(0)
  lineTotal         Decimal        @default(0)
  recurringInvoice  RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id])

  @@index([tenantId, recurringInvoiceId])
}

// OAuth 2.1 Models
model OAuthClient {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  clientId      String   @unique
  clientSecret  String
  name          String
  description   String?
  redirectUris  String   // JSON string of redirect URIs
  scopes        String   // JSON string of allowed scopes
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company            Company @relation(fields: [companyId], references: [id])
  authorizationCodes OAuthAuthorizationCode[]
  accessTokens       OAuthAccessToken[]
  refreshTokens      OAuthRefreshToken[]
  
  @@index([tenantId])
  @@index([companyId])
  @@index([clientId])
}

model OAuthAuthorizationCode {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  clientId      String
  userId        String
  code          String   @unique
  codeChallenge String?  // PKCE code challenge
  codeChallengeMethod String? // PKCE method (S256, plain)
  redirectUri   String?
  scopes        String   // JSON string of scopes
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime @default(now())
  
  // Relations
  client        OAuthClient @relation(fields: [clientId], references: [clientId])
  user          AppUser     @relation(fields: [userId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([code])
  @@index([expiresAt])
}

model OAuthAccessToken {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  clientId      String
  userId        String
  token         String   @unique
  scopes        String   // JSON string of scopes
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  lastUsedAt    DateTime?
  
  // Relations
  client        OAuthClient @relation(fields: [clientId], references: [clientId])
  user          AppUser     @relation(fields: [userId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([token])
  @@index([expiresAt])
}

model OAuthRefreshToken {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  clientId      String
  userId        String
  token         String   @unique
  scopes        String   // JSON string of scopes
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  lastUsedAt    DateTime?
  
  // Relations
  client        OAuthClient @relation(fields: [clientId], references: [clientId])
  user          AppUser     @relation("OAuthRefreshTokens", fields: [userId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([token])
  @@index([expiresAt])
}

// API Key Management
model ApiKey {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  name          String
  keyHash       String   @unique
  keyPrefix     String   // First 8 chars for identification
  permissions   String   // JSON string of permissions
  expiresAt     DateTime?
  lastUsedAt    DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  createdBy     AppUser  @relation(fields: [createdById], references: [id])
  createdById   String
  usageLogs     ApiUsageLog[]
  
  @@index([tenantId, companyId])
  @@index([keyHash])
  @@index([isActive])
  @@index([expiresAt])
}

// Performance Monitoring
model ApiUsageLog {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String?
  userId        String?
  apiKeyId      String?
  endpoint      String
  method        String
  statusCode    Int
  responseTime  Int      // in milliseconds
  requestSize   Int?     // in bytes
  responseSize  Int?     // in bytes
  userAgent     String?
  ipAddress     String?
  timestamp     DateTime @default(now())
  
  // Relations
  company       Company? @relation(fields: [companyId], references: [id])
  apiKey        ApiKey?  @relation(fields: [apiKeyId], references: [id])
  
  @@index([tenantId, timestamp])
  @@index([endpoint, method])
  @@index([statusCode])
  @@index([responseTime])
}

model PerformanceMetric {
  id            String   @id @default(cuid())
  tenantId      String
  metricName    String
  metricValue   Decimal
  metricUnit    String   // ms, count, percentage, etc.
  tags          String?  // JSON object for additional metadata
  timestamp     DateTime @default(now())
  
  @@index([tenantId, metricName, timestamp])
  @@index([timestamp])
}

model Bill {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  vendorId    String
  billNumber  String
  billDate    DateTime
  dueDate     DateTime?
  status      String    @default("draft") // draft, posted, paid, partially_paid, overdue, cancelled
  totalAmount Decimal   @default(0)
  balanceDue  Decimal   @default(0)
  subtotal    Decimal   @default(0)
  taxAmount   Decimal   @default(0)
  description String?
  referenceNumber String?
  notes       String?
  attachments String?   // JSON array of file URLs
  purchaseType String   @default("local") // local | import
  vendorCurrency String?
  exchangeRate  Decimal?
  freightCost   Decimal  @default(0)
  customsDuty   Decimal  @default(0)
  otherImportCosts Decimal @default(0)
  landedCostAllocated Boolean @default(false)
  journalEntryId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id])
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  journalEntry JournalEntry? @relation(fields: [journalEntryId], references: [id])
  lines       BillLine[]
  lineItems   BillLineItem[]
  payments    BillPayment[]
  applications PaymentApplication[]
  purchaseOrder PurchaseOrder? @relation(name: "PurchaseOrderBills", fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  relatedPurchaseOrder PurchaseOrder? @relation(name: "RelatedBill")
  
  // Enhanced Accounts Payable Relations
  invoiceCapture InvoiceCapture? @relation(fields: [invoiceCaptureId], references: [id])
  invoiceCaptureId String?
  paymentSchedules PaymentSchedule[]
  apReconciliationItems APReconciliationItem[]

  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, billNumber])
}

// Enhanced Accounts Payable Process Models

model InvoiceCapture {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  vendorId      String
  invoiceNumber String
  invoiceDate   DateTime
  dueDate       DateTime?
  totalAmount   Decimal  @default(0)
  subtotal      Decimal  @default(0)
  taxAmount     Decimal  @default(0)
  currency      String   @default("USD")
  status        String   @default("captured") // captured, processing, matched, approved, paid, rejected
  source        String   @default("manual") // manual, email, api, ocr, upload
  rawData       String?  // JSON of original invoice data
  attachments   String?  // JSON array of file URLs
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  processedAt   DateTime?
  approvedAt    DateTime?
  paidAt        DateTime?
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  matching      InvoiceMatching?
  approval      InvoiceApproval?
  bills         Bill[]
  workflowInstances APWorkflowInstance[]
  
  @@index([tenantId, companyId])
  @@index([status])
  @@index([vendorId])
  @@unique([tenantId, companyId, invoiceNumber])
}

model InvoiceMatching {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  invoiceId         String @unique
  purchaseOrderId   String?
  goodsReceivedNoteId String?
  matchingType      String   // two_way, three_way
  status            String   @default("pending") // pending, matched, partial, unmatched, exception
  matchScore        Decimal? // 0-100 percentage match
  discrepancies     String?  // JSON array of discrepancies
  matchedBy         String?
  matchedAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  invoice           InvoiceCapture @relation(fields: [invoiceId], references: [id])
  purchaseOrder     PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  goodsReceivedNote GoodsReceivedNote? @relation(fields: [goodsReceivedNoteId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([invoiceId])
  @@index([status])
}

model GoodsReceivedNote {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  grnNumber         String
  purchaseOrderId   String
  receivedDate      DateTime
  receivedBy        String
  status            String   @default("received") // received, verified, accepted, rejected
  notes             String?
  attachments       String?  // JSON array of file URLs
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  matching          InvoiceMatching[]
  
  @@index([tenantId, companyId])
  @@index([purchaseOrderId])
  @@unique([tenantId, companyId, grnNumber])
}

model InvoiceApproval {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  invoiceId     String @unique
  approverId    String
  approvalLevel Int      @default(1)
  status        String   @default("pending") // pending, approved, rejected, delegated
  comments      String?
  approvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  invoice       InvoiceCapture @relation(fields: [invoiceId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([invoiceId])
  @@index([approverId])
}

model PaymentSchedule {
  id                    String   @id @default(cuid())
  tenantId              String
  companyId             String
  billId                String
  scheduledDate         DateTime
  amount                Decimal
  paymentMethod         String   // check, bank_transfer, credit_card, cash
  bankAccountId         String?
  status                String   @default("scheduled") // scheduled, processing, completed, failed, cancelled
  priority              String   @default("normal") // low, normal, high, urgent
  earlyPaymentDiscount  Decimal  @default(0)
  latePaymentPenalty    Decimal  @default(0)
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company  @relation(fields: [companyId], references: [id])
  bill                  Bill     @relation(fields: [billId], references: [id])
  bankAccount           BankAccount? @relation(fields: [bankAccountId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([billId])
  @@index([scheduledDate])
}

model APReconciliation {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  reconciliationDate DateTime
  periodStart       DateTime
  periodEnd         DateTime
  status            String   @default("draft") // draft, in_progress, completed, exception
  totalOutstanding  Decimal  @default(0)
  totalReconciled   Decimal  @default(0)
  discrepancies     String?  // JSON array of discrepancies
  reconciledBy      String
  reviewedBy        String?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company  @relation(fields: [companyId], references: [id])
  items             APReconciliationItem[]
  
  @@index([tenantId, companyId])
  @@index([reconciliationDate])
}

model APReconciliationItem {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  reconciliationId String
  billId          String
  expectedAmount  Decimal
  actualAmount    Decimal?
  status          String   @default("pending") // pending, matched, exception, resolved
  discrepancy     Decimal  @default(0)
  notes           String?
  resolvedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id])
  reconciliation  APReconciliation @relation(fields: [reconciliationId], references: [id])
  bill            Bill     @relation(fields: [billId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([reconciliationId])
  @@index([billId])
}

model APWorkflow {
  id                  String   @id @default(cuid())
  tenantId            String
  companyId           String
  name                String
  description         String?
  isActive            Boolean  @default(true)
  workflowSteps       String   // JSON array of workflow steps
  approvalThresholds  String?  // JSON object of approval thresholds
  autoApprovalRules   String?  // JSON array of auto-approval rules
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  company             Company  @relation(fields: [companyId], references: [id])
  instances           APWorkflowInstance[]
  
  @@index([tenantId, companyId])
}

model APWorkflowInstance {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  workflowId    String
  invoiceId     String
  currentStep   Int      @default(1)
  status        String   @default("active") // active, completed, cancelled, failed
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  workflow      APWorkflow @relation(fields: [workflowId], references: [id])
  invoice       InvoiceCapture @relation(fields: [invoiceId], references: [id])
  steps         APWorkflowStep[]
  
  @@index([tenantId, companyId])
  @@index([workflowId])
  @@index([invoiceId])
}

model APWorkflowStep {
  id                  String   @id @default(cuid())
  tenantId            String
  companyId           String
  workflowInstanceId  String
  stepNumber          Int
  stepType            String   // approval, matching, validation, notification
  assignedTo          String?
  status              String   @default("pending") // pending, in_progress, completed, skipped, failed
  dueDate             DateTime?
  completedAt         DateTime?
  comments            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  company             Company  @relation(fields: [companyId], references: [id])
  workflowInstance    APWorkflowInstance @relation(fields: [workflowInstanceId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([workflowInstanceId])
  @@index([assignedTo])
}

model PurchaseOrder {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  vendorId          String
  poNumber          String
  orderDate         DateTime
  expectedDelivery  DateTime?
  status            String    @default("draft") // draft, approved
  totalAmount       Decimal   @default(0)
  currency          String    @default("USD")
  notes             String?
  terms             String?
  approvalWorkflow  String?   // JSON string for approval steps
  receivingStatus   String    @default("pending") // pending, partial, complete
  // related bill reference (defined below in relations section)
  // Import/Export Purchase Support
  purchaseType      String    @default("local") // local | import
  vendorCurrency    String?   // Currency used by vendor
  exchangeRate      Decimal?  // Exchange rate for vendor currency
  freightCost       Decimal   @default(0) // Freight/shipping costs
  customsDuty       Decimal   @default(0) // Customs duty costs
  otherImportCosts  Decimal   @default(0) // Other import-related costs
  landedCostAllocated Boolean @default(false) // Whether landed costs have been allocated
  // Incoterms and Shipping Details
  incoterms         String?   // FOB, CIF, EXW, etc.
  shippingMethod    String?   // sea, air, land, courier
  originCountry     String?   // ISO 3166-1 alpha-2
  destinationCountry String?  // ISO 3166-1 alpha-2
  portOfEntry       String?   // Port or airport of entry
  // Import Documentation
  importLicense     String?   // Import license number
  customsDeclaration String?  // Customs declaration number
  billOfLading      String?   // Bill of lading number
  commercialInvoice String?   // Commercial invoice number
  packingList       String?   // Packing list number
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company   @relation(fields: [companyId], references: [id])
  vendor            Vendor    @relation(fields: [vendorId], references: [id])
  lines             PurchaseOrderLine[]
  receipts          Receipt[]
  importShipments   ImportShipment[]
  bills             Bill[]    @relation(name: "PurchaseOrderBills")
  relatedBillId     String?   @unique
  relatedBill       Bill?     @relation(name: "RelatedBill", fields: [relatedBillId], references: [id])
  
  // Enhanced Accounts Payable Relations
  invoiceMatchings  InvoiceMatching[]
  goodsReceivedNotes GoodsReceivedNote[]

  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, poNumber])
}

model PurchaseOrderLine {
  id                String   @id @default(cuid())
  tenantId          String
  purchaseOrderId   String
  productId         String?
  description       String?
  quantity          Decimal  @default(1)
  unitPrice         Decimal  @default(0)
  taxRate           Decimal  @default(0)
  lineTotal         Decimal  @default(0)
  receivedQuantity  Decimal  @default(0)
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product           Product? @relation(fields: [productId], references: [id])

  @@index([tenantId, purchaseOrderId])
  @@index([productId])
}

model Receipt {
  id                String   @id @default(cuid())
  tenantId          String
  purchaseOrderId   String
  receiptNumber     String
  receivedDate      DateTime
  receivedBy        String?
  notes             String?
  qualityCheck      String?   // JSON string for quality inspection
  partialReceipt    Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items             ReceiptItem[]

  @@index([tenantId, purchaseOrderId])
  @@unique([tenantId, purchaseOrderId, receiptNumber])
}

model ReceiptItem {
  id                String   @id @default(cuid())
  tenantId          String
  receiptId         String
  purchaseOrderLineId String?
  productId         String?
  description       String?
  quantityReceived  Decimal  @default(0)
  quantityAccepted  Decimal  @default(0)
  quantityRejected  Decimal  @default(0)
  rejectionReason   String?
  receipt           Receipt  @relation(fields: [receiptId], references: [id])

  @@index([tenantId, receiptId])
}

model ImportShipment {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  purchaseOrderId   String
  shipmentNumber    String
  shipmentDate      DateTime
  expectedArrival   DateTime?
  actualArrival     DateTime?
  status            String    @default("pending") // pending, in_transit, arrived, cleared, delivered
  // Shipping Details
  carrier           String?   // Shipping carrier
  trackingNumber    String?   // Tracking number
  containerNumber   String?   // Container number
  vesselFlight      String?   // Vessel or flight number
  // Customs Information
  customsBroker     String?   // Customs broker
  customsEntryDate  DateTime?
  customsReleaseDate DateTime?
  dutiesPaid        Decimal   @default(0)
  taxesPaid         Decimal   @default(0)
  // Documentation
  billOfLading      String?
  commercialInvoice String?
  packingList       String?
  certificateOfOrigin String?
  insuranceCertificate String?
  // Cost Tracking
  freightCost       Decimal   @default(0)
  insuranceCost     Decimal   @default(0)
  customsFees       Decimal   @default(0)
  storageCost       Decimal   @default(0)
  otherCosts        Decimal   @default(0)
  totalLandedCost   Decimal   @default(0)
  // Notes and Status
  notes             String?
  issues            String?   // JSON string for tracking issues
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company   @relation(fields: [companyId], references: [id])
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  customsEvents     CustomsEvent[]

  @@index([tenantId, companyId])
  @@index([tenantId, purchaseOrderId])
  @@unique([tenantId, companyId, shipmentNumber])
}

model CustomsEvent {
  id                String   @id @default(cuid())
  tenantId          String
  importShipmentId  String
  eventType         String   // shipment_created, customs_entry, customs_hold, customs_release, delivery
  eventDate         DateTime
  description       String
  location          String?
  documents         String?   // JSON string for related documents
  status            String    @default("completed") // pending, completed, failed
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  importShipment    ImportShipment @relation(fields: [importShipmentId], references: [id])

  @@index([tenantId, importShipmentId])
  @@index([tenantId, importShipmentId, eventDate])
}

model ExpenseCategory {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  name              String
  description       String?
  parentId          String?
  color             String?   // Hex color for UI
  icon              String?   // Icon identifier
  isActive          Boolean   @default(true)
  taxTreatment      String?   // deductible, non-deductible, partially_deductible
  approvalThreshold Decimal?  // Amount above which approval is required
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company   @relation(fields: [companyId], references: [id])
  parent            ExpenseCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          ExpenseCategory[] @relation("CategoryHierarchy")
  budgets           Budget[]
  expenseRules      ExpenseRule[]
  expenses          Expense[]

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, parentId])
}

model Budget {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  categoryId        String
  name              String
  description       String?
  period            String   // monthly, quarterly, yearly
  startDate         DateTime
  endDate           DateTime
  amount            Decimal  @default(0)
  spentAmount       Decimal  @default(0)
  isActive          Boolean  @default(true)
  alertThreshold    Decimal? // Percentage for budget alerts
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id])
  category          ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, categoryId])
  @@index([tenantId, companyId, startDate, endDate])
}

model ExpenseRule {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  categoryId        String
  name              String
  description       String?
  ruleType          String   // amount_limit, vendor_restriction, approval_required
  conditions        String   // JSON string for rule conditions
  actions           String   // JSON string for rule actions
  isActive          Boolean  @default(true)
  priority          Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id])
  category          ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, categoryId])
}

model ApprovalWorkflow {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  name              String
  description       String?
  entityType        String   // purchase_order, expense, bill, invoice
  steps             String   // JSON string for approval steps
  conditions        String?  // JSON string for workflow conditions
  autoApproval      Boolean  @default(false)
  escalationRules   String?  // JSON string for escalation rules
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id])
  approvals         Approval[]

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, entityType])
}

model Approval {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  workflowId        String
  entityType        String   // purchase_order, expense, bill, invoice
  entityId          String
  stepNumber        Int
  approverId        String
  status            String   @default("pending") // pending, approved, rejected, escalated
  comments          String?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  escalationReason  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  company           Company  @relation(fields: [companyId], references: [id])
  workflow          ApprovalWorkflow @relation(fields: [workflowId], references: [id])
  approver          AppUser @relation("ApprovalApprover", fields: [approverId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, entityType, entityId])
  @@index([tenantId, companyId, approverId])
}

model BillLine {
  id          String  @id @default(cuid())
  tenantId    String
  billId      String
  productId   String?
  description String?
  quantity    Decimal @default(1)
  unitPrice   Decimal @default(0)
  taxRate     Decimal @default(0)
  lineTotal   Decimal @default(0)
  bill        Bill    @relation(fields: [billId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])

  @@index([tenantId, billId])
}

model BillLineItem {
  id          String  @id @default(cuid())
  tenantId    String
  billId      String
  accountId   String?
  description String
  quantity    Decimal @default(1)
  unitPrice   Decimal @default(0)
  amount      Decimal @default(0)
  taxAmount   Decimal @default(0)
  bill        Bill    @relation(fields: [billId], references: [id], onDelete: Cascade)
  account     Account? @relation(fields: [accountId], references: [id])

  @@index([tenantId, billId])
}

model BillPayment {
  id              String   @id @default(cuid())
  tenantId        String
  billId          String
  paymentDate     DateTime
  amount          Decimal
  paymentMethod   String   // cash, bank_transfer, check, credit_card, online
  bankAccountId   String?
  referenceNumber String?
  notes           String?
  status          String   @default("completed") // completed, pending, failed, cancelled
  journalEntryId  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  bill            Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  journalEntry    JournalEntry? @relation(fields: [journalEntryId], references: [id])

  @@index([tenantId, billId])
}

model Category {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String?
  name        String
  description String?
  color       String?  // Hex color for UI
  icon        String?  // Icon name for UI
  parentId    String?  // For nested categories
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
  
  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, name])
}

model Product {
  // Core Product Information
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  name          String
  sku           String
  description   String?
  shortDescription String?
  type          String   @default("PRODUCT") // PRODUCT, SERVICE, DIGITAL, BUNDLE
  
  // Pricing Information
  unitPrice     Decimal  @default(0)
  costPrice     Decimal  @default(0)
  sellingPrice  Decimal? // Alternative field name for unitPrice
  
  // Stock & Inventory Management
  stockQuantity Decimal  @default(0)
  reservedQuantity Decimal @default(0)
  availableQuantity Decimal @default(0)
  minStockLevel Decimal?
  maxStockLevel Decimal?
  reorderPoint  Decimal?
  reorderQuantity Decimal?
  reorderLevel  Decimal? // Alternative field name for minStockLevel
  unit          String?  // Unit of measurement
  lastPurchaseDate DateTime? // Last purchase date
  
  // Classification & Organization
  categoryId    String?
  brand         String?
  model         String?
  tags          String?
  
  // Physical Properties
  weight        Decimal?
  dimensionsLength Decimal?
  dimensionsWidth  Decimal?
  dimensionsHeight Decimal?
  dimensionsString String? // For backward compatibility
  
  // Identification & Tracking
  barcode       String?
  qrCode        String?
  trackSerialNumbers Boolean @default(false)
  trackBatches  Boolean @default(false)
  costingMethod String? @default("FIFO") // FIFO, LIFO, WEIGHTED_AVERAGE, SPECIFIC_IDENTIFICATION
  
  // Tax Information
  taxRate       Decimal?
  taxInclusive  Boolean @default(false)
  taxCode       String?
  taxExempt     Boolean @default(false)
  
  // Product Type Flags
  isDigital     Boolean @default(false)
  isService     Boolean @default(false)
  isPhysical    Boolean @default(true)
  trackInventory Boolean @default(true)
  
  // Business Rules & Options
  allowBackorder Boolean @default(false)
  allowPreorder Boolean @default(false)
  preorderDate  DateTime?
  
  // Product Features & Marketing
  isFeatured    Boolean @default(false)
  isBestSeller  Boolean @default(false)
  isNewArrival  Boolean @default(false)
  
  // Warranty & Returns
  warrantyPeriod Decimal?
  warrantyUnit  String? // DAYS, WEEKS, MONTHS, YEARS
  returnPolicy  String?
  
  // Shipping & Fulfillment
  shippingClass String?
  
  // SEO & Marketing
  seoTitle      String?
  seoDescription String?
  metaKeywords  String?
  
  // Media & Variants (JSON fields)
  images        String? // JSON array of image URLs
  variants      String? // JSON array of product variants
  
  // Related Products & Cross-selling (JSON fields)
  relatedProducts String? // JSON array of product IDs
  upsellProducts  String? // JSON array of product IDs
  crossSellProducts String? // JSON array of product IDs
  
  // Custom Fields & Extensions
  customFields  String? // JSON object for additional fields
  
  // Additional fields from form
  visibility    String? @default("public") // public, private, hidden
  customField1  String?
  customField2  String?
  customField3  String?
  customField4  String?
  requiresLicense Boolean @default(false)
  hasExpiryDate Boolean @default(false)
  isBundle      Boolean @default(false)
  notes         String?
  
  // System Fields
  status        String   @default("ACTIVE") // ACTIVE, INACTIVE, DISCONTINUED, DRAFT
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  movements     InventoryMovement[]
  locations     ProductLocation[]
  alerts        ReorderAlert[]
  transfers     InventoryTransfer[]
  invoiceLines  InvoiceLine[]
  estimateLines EstimateLine[]
  purchaseOrderLines PurchaseOrderLine[]
  billLines     BillLine[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, categoryId])
  @@index([tenantId, companyId, type])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, barcode])
  @@unique([tenantId, companyId, sku])
}

model InventoryMovement {
  id            String   @id @default(cuid())
  tenantId      String
  productId     String
  locationId    String?
  movementType  String
  quantity      Decimal
  unitCost      Decimal?
  movementDate  DateTime
  reference     String?
  reason        String?
  product       Product  @relation(fields: [productId], references: [id])
  location      Location? @relation(fields: [locationId], references: [id])

  @@index([tenantId, productId])
}

model Location {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  name          String
  code          String
  description   String?
  type          String   @default("warehouse") // warehouse, store, office, etc.
  locationType  String?  @default("WAREHOUSE") // WAREHOUSE, STORE, OFFICE, DISTRIBUTION_CENTER, FACTORY, SHOWROOM, OTHER
  
  // Address Information
  address       String?
  address2      String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  latitude      String?
  longitude     String?
  timezone      String?
  
  // Contact Information
  contactName   String?
  contactPhone  String?
  contactEmail  String?
  managerName   String?
  managerEmail  String?
  managerPhone  String?
  
  // Operational Settings
  isDefault     Boolean  @default(false)
  isActive      Boolean  @default(true)
  capacity      String?
  operatingHours String?
  specialInstructions String?
  warehouseZone String?
  temperatureControlled Boolean @default(false)
  securityLevel String? @default("STANDARD") // STANDARD, HIGH, MAXIMUM
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  products      ProductLocation[]
  movements     InventoryMovement[]
  alerts        ReorderAlert[]
  transfersFrom InventoryTransfer[] @relation("TransferFrom")
  transfersTo   InventoryTransfer[] @relation("TransferTo")

  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, code])
}

model ProductLocation {
  id            String   @id @default(cuid())
  tenantId      String
  productId     String
  locationId    String
  quantity      Decimal  @default(0)
  reservedQuantity Decimal @default(0)
  reorderPoint  Decimal?
  maxQuantity   Decimal?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
  location      Location @relation(fields: [locationId], references: [id])

  @@index([tenantId, productId])
  @@index([tenantId, locationId])
  @@unique([tenantId, productId, locationId])
}

model ReorderAlert {
  id            String   @id @default(cuid())
  tenantId      String
  productId     String
  locationId    String?
  alertType     String   // low_stock, out_of_stock, overstock, etc.
  threshold     Decimal
  currentStock  Decimal
  status        String   @default("PENDING") // PENDING, ACKNOWLEDGED, RESOLVED
  priority      String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  message       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
  location      Location? @relation(fields: [locationId], references: [id])

  @@index([tenantId, productId])
  @@index([tenantId, status])
}

model AlertSettings {
  id                        String   @id @default(cuid())
  tenantId                  String   @unique
  lowStockThreshold         Int      @default(5)
  overstockThreshold        Int      @default(100)
  criticalStockThreshold    Int      @default(1)
  emailNotifications        Boolean  @default(true)
  smsNotifications          Boolean  @default(false)
  dashboardAlerts           Boolean  @default(true)
  autoAcknowledgeDays       Int      @default(7)
  dailyDigestTime           String   @default("09:00")
  weeklySummaryDay          String   @default("MONDAY")
  weeklySummaryTime         String   @default("08:00")
  immediateAlerts           Boolean  @default(true)
  immediateAlertsCriticalOnly Boolean @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([tenantId])
}

model InventoryTransfer {
  id                String   @id @default(cuid())
  tenantId          String
  productId         String
  fromLocationId    String?
  toLocationId      String
  quantity          Decimal
  transferDate      DateTime
  status            String   @default("PENDING") // PENDING, IN_TRANSIT, COMPLETED, CANCELLED
  reference         String?
  notes             String?
  requestedBy       String?
  approvedBy        String?
  completedBy       String?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  product           Product  @relation(fields: [productId], references: [id])
  fromLocation      Location? @relation("TransferFrom", fields: [fromLocationId], references: [id])
  toLocation        Location @relation("TransferTo", fields: [toLocationId], references: [id])

  @@index([tenantId, status])
  @@index([tenantId, productId])
  @@index([tenantId, transferDate])
}

// Collaboration & Communication
model ClientPortalAccess {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String
  userId       String?  // For AppUser access
  clientId     String?  // For Client access
  permissions  String   // JSON string of permissions (view_invoices, view_reports, etc.)
  isActive     Boolean  @default(true)
  lastAccess   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  user         AppUser? @relation(fields: [userId], references: [id])
  client       Client?  @relation(fields: [clientId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, userId])
  @@index([tenantId, clientId])
}

// Workspaces, Files, Notifications
model Workspace {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  members     WorkspaceMember[]
  files       FileAsset[]

  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, name])
}

model WorkspaceMember {
  id           String   @id @default(cuid())
  tenantId     String
  workspaceId  String
  userId       String
  role         String   // owner, admin, member, guest
  createdAt    DateTime @default(now())
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  user         AppUser   @relation(fields: [userId], references: [id])

  @@unique([tenantId, workspaceId, userId])
  @@index([tenantId, workspaceId])
  @@index([tenantId, userId])
}

model FileAsset {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  uploaderId   String
  workspaceId  String?
  folderId     String?
  categoryId   String?
  displayName  String?
  description  String?
  name         String
  mimeType     String
  sizeBytes    Int
  storageKey   String   // path or key in storage backend
  sha256       String?
  version      Int      @default(1)
  status       String   @default("active") // active, archived, deleted
  isPublic     Boolean  @default(false)
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime?
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  uploader     AppUser  @relation(fields: [uploaderId], references: [id])
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  category     DocumentCategory? @relation(fields: [categoryId], references: [id])
  shares       DocumentShare[]
  workflows    DocumentWorkflow[]
  activities   DocumentActivity[]
  accessControls DocumentAccessControl[]
  webhooks     DocumentWebhook[]

  @@index([tenantId, companyId])
  @@index([tenantId, uploaderId])
  @@index([tenantId, workspaceId])
  @@index([tenantId, categoryId])
  @@index([tenantId, status])
}

model Notification {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  userId       String
  type         String   // message, task_assigned, file_shared, system
  title        String
  body         String?
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  company      Company? @relation(fields: [companyId], references: [id])
  user         AppUser  @relation(fields: [userId], references: [id])

  @@index([tenantId, userId])
  @@index([tenantId, companyId])
  @@index([tenantId, isRead])
}

model Message {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String
  senderId     String
  receiverId   String
  messageText  String
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  sender       AppUser  @relation("MessageSender", fields: [senderId], references: [id])
  receiver     AppUser  @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, senderId])
  @@index([tenantId, receiverId])
  @@index([tenantId, createdAt])
}

model Task {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String
  assignedTo   String
  taskType     String   // reconciliation, review, audit, approval, follow_up
  title        String
  description  String?
  dueDate      DateTime
  status       String   @default("pending") // pending, in_progress, completed, overdue
  priority     String   @default("medium") // low, medium, high, urgent
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
  assignedUser AppUser  @relation(fields: [assignedTo], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, dueDate])
  @@index([tenantId, status])
}

// Document Management Models
model DocumentCategory {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String?
  name        String
  description String?
  color       String?  // Hex color code
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company? @relation(fields: [companyId], references: [id])
  documents   FileAsset[]
  
  @@index([tenantId, companyId])
  @@unique([tenantId, companyId, name])
}

model DocumentShare {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  documentId   String
  sharedWith   String?  // User ID (for user sharing)
  clientId     String?  // Client ID (for client sharing)
  sharedBy     String?  // User ID who shared the document
  permissions  String   // read, write, admin
  status       String   @default("active") // active, revoked
  message      String?  // Optional message when sharing
  sharedAt     DateTime @default(now())
  expiresAt    DateTime?
  viewedAt     DateTime? // When viewed
  downloadedAt DateTime? // When downloaded
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  document     FileAsset @relation(fields: [documentId], references: [id])
  user         AppUser? @relation("DocumentShareUser", fields: [sharedWith], references: [id])
  client       Client?  @relation(fields: [clientId], references: [id])
  sharedByUser AppUser? @relation("DocumentSharedBy", fields: [sharedBy], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, documentId])
  @@index([tenantId, sharedWith])
  @@index([tenantId, clientId])
  @@index([tenantId, sharedBy])
}

model DocumentWorkflow {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  documentId   String
  workflowType String   // approval, review, signature
  status       String   @default("pending") // pending, approved, rejected, completed
  assignedTo   String   // User ID
  assignedAt   DateTime @default(now())
  completedAt  DateTime?
  comments     String?
  metadata     String?  // JSON string for workflow metadata
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  document     FileAsset @relation(fields: [documentId], references: [id])
  assignedUser AppUser  @relation(fields: [assignedTo], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, documentId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, status])
}

model DocumentActivity {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  documentId   String
  userId       String
  action       String   // uploaded, downloaded, viewed, shared, deleted
  details      String?
  createdAt    DateTime @default(now())
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  document     FileAsset @relation(fields: [documentId], references: [id])
  user         AppUser  @relation(fields: [userId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, documentId])
  @@index([tenantId, userId])
  @@index([tenantId, createdAt])
}

// Phase 4: Enterprise Integration & Advanced Workflows

model DocumentAccessControl {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String?
  documentId        String
  accessLevel       String   // public, restricted, confidential, secret
  userGroups        String   // Comma-separated user group IDs
  timeRestrictions  String?  // JSON string for time-based access restrictions
  ipRestrictions    String   // Comma-separated IP addresses
  mfaRequired       Boolean  @default(false)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  company           Company? @relation(fields: [companyId], references: [id])
  document          FileAsset @relation(fields: [documentId], references: [id])
  createdByUser     AppUser  @relation("AccessControlCreator", fields: [createdBy], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, documentId])
  @@unique([tenantId, documentId])
}

model DocumentWebhook {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  documentId   String
  url          String
  events       String   // Comma-separated event types
  headers      String?  // JSON string for custom headers
  retryPolicy  String?  // JSON string for retry configuration
  isActive     Boolean  @default(true)
  lastTriggered DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  document     FileAsset @relation(fields: [documentId], references: [id])
  createdByUser AppUser @relation("WebhookCreator", fields: [createdBy], references: [id])
  deliveries   WebhookDelivery[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, documentId])
  @@index([tenantId, isActive])
}

model WebhookDelivery {
  id           String   @id @default(cuid())
  webhookId    String
  documentId   String
  tenantId     String
  event        String
  payload      String   // JSON string for webhook payload
  responseCode Int?
  responseBody String?
  attempts     Int      @default(0)
  maxAttempts  Int      @default(3)
  status       String   @default("pending")
  deliveredAt  DateTime?
  createdAt    DateTime @default(now())
  
  // Relations
  webhook      DocumentWebhook @relation(fields: [webhookId], references: [id])
  
  @@index([tenantId, webhookId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
}

model ComplianceCheck {
  id             String   @id @default(cuid())
  tenantId       String
  companyId      String?
  documentIds    String   // Comma-separated document IDs
  complianceRules String   // Comma-separated compliance rule IDs
  ruleId         String?  // Single rule ID for specific checks
  schedule       String   // immediate, daily, weekly, monthly
  notifications  String   // Comma-separated email addresses
  status         String   @default("pending")
  startedAt      DateTime?
  completedAt    DateTime?
  results        ComplianceCheckResult[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  
  // Relations
  company        Company? @relation(fields: [companyId], references: [id])
  createdByUser  AppUser  @relation("ComplianceCheckCreator", fields: [createdBy], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
}

model ComplianceCheckResult {
  id               String   @id @default(cuid())
  complianceCheckId String
  documentId       String
  ruleId           String
  ruleName         String
  status           String   // passed, failed, warning
  details          String?
  metadata         String?  // JSON string for additional metadata
  createdAt        DateTime @default(now())
  
  // Relations
  complianceCheck  ComplianceCheck @relation(fields: [complianceCheckId], references: [id])
  
  @@index([complianceCheckId])
  @@index([documentId])
  @@index([status])
}

model AutomatedReport {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String?
  reportType   String   // compliance, audit, performance, storage, workflow
  schedule     String   // cron expression
  recipients   String   // Comma-separated email addresses
  format       String   @default("pdf")
  filters      String?  // JSON string for report filters
  isActive     Boolean  @default(true)
  lastRun      DateTime?
  nextRun      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  
  // Relations
  company      Company? @relation(fields: [companyId], references: [id])
  createdByUser AppUser @relation("AutomatedReportCreator", fields: [createdBy], references: [id])
  generations  ReportGeneration[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, isActive])
  @@index([tenantId, nextRun])
}

model ReportGeneration {
  id                 String   @id @default(cuid())
  automatedReportId  String
  tenantId           String
  status             String   @default("pending")
  filePath           String?  // Path to generated report file
  fileSize           Int?     // Size of generated report in bytes
  startedAt          DateTime?
  completedAt        DateTime?
  errorMessage       String?
  metadata           String?  // JSON string for additional metadata
  createdAt          DateTime @default(now())
  
  // Relations
  automatedReport    AutomatedReport @relation(fields: [automatedReportId], references: [id])
  
  @@index([tenantId, automatedReportId])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
}

// Advanced Financial Reporting Suite Models
model FinancialReport {
  id          String   @id @default(cuid())
  name        String
  type        String   // balance_sheet, income_statement, cash_flow, equity, custom
  description String?
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isTemplate  Boolean  @default(false)
  isPublic    Boolean  @default(false)
  metadata    String?  // JSON string for additional configuration
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser AppUser @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  reportItems ReportItem[]
  reportSchedules ReportSchedule[]
  reportExecutions ReportExecution[]
  
  @@index([companyId])
  @@index([type])
  @@index([createdBy])
}

model ReportItem {
  id            String   @id @default(cuid())
  reportId      String
  name          String
  type          String   // account, calculation, text, chart
  order         Int
  configuration String?  // JSON string for item-specific settings
  formula       String?  // For calculated items
  accountIds    String?  // Comma-separated account IDs for account-based items
  
  // Relations
  report        FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([order])
}

model ReportSchedule {
  id          String   @id @default(cuid())
  reportId    String
  name        String
  frequency   String   // daily, weekly, monthly, quarterly, yearly
  nextRun     DateTime
  recipients  String?  // Comma-separated email addresses
  format      String   // pdf, excel, csv
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  report      FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([nextRun])
  @@index([isActive])
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  type        String   // balance_sheet, income_statement, cash_flow, equity, custom
  category    String   // industry, standard, custom
  description String?
  configuration String  // JSON string for template configuration
  isPublic    Boolean  @default(false)
  createdBy   String
  createdById String?  // Alternative field name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  createdByUser AppUser @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@index([category])
  @@index([createdBy])
}

model ReportExecution {
  id          String   @id @default(cuid())
  reportId    String
  executedBy  String
  executedAt  DateTime @default(now())
  parameters  String?  // JSON string for execution parameters
  result      String?  // JSON string for report result data
  status      String   // success, error, processing
  errorMessage String?
  
  // Relations
  report      FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  executedByUser AppUser @relation(fields: [executedBy], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([executedBy])
  @@index([executedAt])
  @@index([status])
}

model CustomReport {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  companyId   String
  templateId  String?
  filters     String   // JSON string for report filters
  columns     String   // JSON string for report columns
  grouping    String?  // JSON string for grouping configuration
  sorting     String?  // JSON string for sorting configuration
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser AppUser @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([companyId])
  @@index([createdBy])
  @@index([isPublic])
}

// AI Configuration
model AIConfig {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  configType  String   // prompts, categories, behavior, industry
  configData  String   // JSON string for configuration data
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, companyId, configType])
  @@index([tenantId])
  @@index([tenantId, companyId])
  @@index([configType])
  @@index([isActive])
}

// AI Learning Models
model AIModel {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelName       String   // anomaly_detection, cashflow_prediction, expense_classification
  modelVersion    String   // v1.0, v1.1, etc.
  modelType       String   // classification, regression, clustering, anomaly_detection
  algorithm       String   // random_forest, neural_network, xgboost, etc.
  status          String   @default("training") // training, active, deprecated, failed
  accuracy        Decimal? // Model accuracy score
  precision       Decimal? // Model precision score
  recall          Decimal? // Model recall score
  f1Score         Decimal? // Model F1 score
  modelPath       String?  // Path to saved model file
  hyperparameters String?  // JSON string of hyperparameters
  featureColumns  String?  // JSON string of feature column names
  targetColumn    String?  // Target column name
  trainingDataSize Int?    // Number of training samples
  validationDataSize Int?  // Number of validation samples
  trainingStartTime DateTime?
  trainingEndTime   DateTime?
  lastUsedAt      DateTime?
  experimentId    String?   // Related experiment ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  trainingRuns    AIModelTrainingRun[]
  predictions     AIModelPrediction[]
  featureImportances AIModelFeatureImportance[]
  deployments     AIDeployment[]
  driftDetection  AIDriftDetection[]
  performanceMetrics AIPerformanceMetrics[]
  learningFeedback AILearningFeedback[]
  governanceViolations AIGovernanceViolation[]
  experiment          AIExperiment? @relation(fields: [experimentId], references: [id], onDelete: SetNull)
  
  @@unique([tenantId, companyId, modelName, modelVersion])
  @@index([tenantId, companyId])
  @@index([modelType])
  @@index([status])
  @@index([trainingEndTime])
}

model AIModelTrainingRun {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String
  runName         String
  status          String   @default("running") // running, completed, failed, cancelled
  startTime       DateTime @default(now())
  endTime         DateTime?
  duration        Int?     // Duration in seconds
  epochs          Int?     // Number of training epochs
  batchSize       Int?     // Training batch size
  learningRate    Decimal? // Learning rate used
  loss            Decimal? // Final training loss
  validationLoss  Decimal? // Final validation loss
  accuracy        Decimal? // Training accuracy
  validationAccuracy Decimal? // Validation accuracy
  hyperparameters String?  // JSON string of hyperparameters used
  trainingMetrics String?  // JSON string of training metrics over time
  validationMetrics String? // JSON string of validation metrics over time
  errorMessage    String?  // Error message if failed
  logs            String?  // Training logs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([status])
  @@index([startTime])
}

model AIModelPrediction {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String
  predictionType  String   // anomaly, classification, regression, forecast
  inputData       String   // JSON string of input features
  prediction      String   // JSON string of prediction result
  confidence      Decimal? // Prediction confidence score
  probability     Decimal? // Prediction probability
  actualValue     String?  // Actual value (for supervised learning)
  isCorrect       Boolean? // Whether prediction was correct
  error           Decimal? // Prediction error
  timestamp       DateTime @default(now())
  metadata        String?  // Additional metadata
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  learningFeedback AILearningFeedback[]
  
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([predictionType])
  @@index([timestamp])
}

model AIModelFeatureImportance {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String
  featureName     String
  importance      Decimal  // Feature importance score
  rank            Int?     // Feature rank
  method          String   // permutation, shap, built_in
  createdAt       DateTime @default(now())
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([featureName])
  @@index([importance])
}

model AIDataPipeline {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  pipelineName    String
  pipelineType    String   // data_collection, preprocessing, feature_engineering, validation
  status          String   @default("active") // active, paused, error
  schedule        String?  // Cron expression for scheduling
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  config          String   // JSON string of pipeline configuration
  sourceTables    String?  // JSON string of source table names
  targetTables    String?  // JSON string of target table names
  transformations String?  // JSON string of data transformations
  validationRules String?  // JSON string of validation rules
  errorHandling   String?  // JSON string of error handling config
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  runs            AIDataPipelineRun[]
  
  @@unique([tenantId, companyId, pipelineName])
  @@index([tenantId, companyId])
  @@index([pipelineType])
  @@index([status])
  @@index([nextRunAt])
}

model AIDataPipelineRun {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  pipelineId      String
  runId           String   // Unique run identifier
  status          String   @default("running") // running, completed, failed, cancelled
  startTime       DateTime @default(now())
  endTime         DateTime?
  duration        Int?     // Duration in seconds
  recordsProcessed Int?    // Number of records processed
  recordsFailed   Int?     // Number of records that failed
  recordsSkipped  Int?     // Number of records skipped
  inputSize       Int?     // Input data size in bytes
  outputSize      Int?     // Output data size in bytes
  errorMessage    String?  // Error message if failed
  logs            String?  // Pipeline execution logs
  metrics         String?  // JSON string of execution metrics
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  pipeline        AIDataPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, companyId])
  @@index([pipelineId])
  @@index([status])
  @@index([startTime])
}

model AIDataQuality {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  tableName       String
  columnName      String?
  qualityMetric   String   // completeness, accuracy, consistency, timeliness, validity
  metricValue     Decimal  // Quality metric value
  threshold       Decimal? // Quality threshold
  status          String   // pass, fail, warning
  checkDate       DateTime @default(now())
  dataSample      String?  // JSON string of data sample for analysis
  issues          String?  // JSON string of quality issues found
  recommendations String?  // JSON string of improvement recommendations
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, companyId])
  @@index([tableName])
  @@index([columnName])
  @@index([qualityMetric])
  @@index([checkDate])
}

model AIPerformanceMetrics {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String?
  metricType      String   // accuracy, precision, recall, f1, mae, rmse, latency
  metricValue     Decimal
  metricDate      DateTime @default(now())
  timeWindow      String?  // daily, weekly, monthly
  comparisonValue Decimal? // Previous period value for comparison
  trend           String?  // improving, declining, stable
  context         String?  // JSON string of additional context
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([metricType])
  @@index([metricDate])
}

model AILearningFeedback {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  userId          String?
  modelId         String?
  predictionId    String?
  feedbackType    String   // correction, rating, comment, flag
  feedbackData    String   // JSON string of feedback data
  isPositive      Boolean? // Whether feedback is positive
  confidence      Decimal? // User confidence in feedback
  impact          String?  // high, medium, low
  status          String   @default("pending") // pending, processed, ignored
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user            AppUser? @relation(fields: [userId], references: [id], onDelete: SetNull)
  model           AIModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)
  prediction      AIModelPrediction? @relation(fields: [predictionId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, companyId])
  @@index([userId])
  @@index([modelId])
  @@index([predictionId])
  @@index([feedbackType])
  @@index([status])
  @@index([createdAt])
}

model AIDriftDetection {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String?
  driftType       String   // data_drift, concept_drift, label_drift
  featureName     String?
  baselineValue   Decimal
  currentValue    Decimal
  driftScore      Decimal  // Drift magnitude score
  threshold       Decimal? // Drift threshold
  status          String   @default("detected") // detected, warning, normal
  detectionDate   DateTime @default(now())
  sampleData      String?  // JSON string of sample data
  analysis        String?  // JSON string of drift analysis
  recommendations String?  // JSON string of recommendations
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)
  
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([driftType])
  @@index([featureName])
  @@index([detectionDate])
  @@index([driftScore])
}

model AIExperiment {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  experimentName  String
  description     String?
  objective       String   // Model objective/use case
  status          String   @default("active") // active, completed, archived
  startDate       DateTime @default(now())
  endDate         DateTime?
  hypothesis      String?  // Experiment hypothesis
  methodology     String?  // JSON string of experiment methodology
  baselineModel   String?  // Baseline model ID
  currentModel    String?  // Current best model ID
  successMetrics  String?  // JSON string of success metrics
  results         String?  // JSON string of experiment results
  conclusions     String?  // Experiment conclusions
  nextSteps       String?  // JSON string of next steps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models          AIModel[]
  
  @@unique([tenantId, companyId, experimentName])
  @@index([tenantId, companyId])
  @@index([objective])
  @@index([status])
  @@index([startDate])
}

model AIDeployment {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  modelId         String
  deploymentName  String
  environment     String   // development, staging, production
  status          String   @default("deploying") // deploying, active, failed, rolled_back
  deploymentDate  DateTime @default(now())
  activationDate  DateTime?
  deactivationDate DateTime?
  endpoint        String?  // API endpoint URL
  version         String   // Deployment version
  config          String?  // JSON string of deployment configuration
  healthCheck     String?  // JSON string of health check results
  performance     String?  // JSON string of performance metrics
  rollbackReason  String?  // Reason for rollback if applicable
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model           AIModel  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, companyId, deploymentName, environment])
  @@index([tenantId, companyId])
  @@index([modelId])
  @@index([environment])
  @@index([status])
  @@index([deploymentDate])
}

model AIGovernance {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  policyName      String
  policyType      String   // bias_detection, fairness, transparency, privacy, security
  status          String   @default("active") // active, inactive, draft
  description     String?
  rules           String   // JSON string of governance rules
  thresholds      String?  // JSON string of thresholds
  monitoring      String?  // JSON string of monitoring configuration
  alerts          String?  // JSON string of alert configuration
  compliance      String?  // JSON string of compliance requirements
  lastReviewDate  DateTime?
  nextReviewDate  DateTime?
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByUser   AppUser  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  violations      AIGovernanceViolation[]
  
  @@unique([tenantId, companyId, policyName])
  @@index([tenantId, companyId])
  @@index([policyType])
  @@index([status])
  @@index([nextReviewDate])
}

model AIGovernanceViolation {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  policyId        String
  modelId         String?
  violationType   String   // bias, fairness, privacy, security, transparency
  severity        String   // low, medium, high, critical
  description     String
  details         String?  // JSON string of violation details
  detectedAt      DateTime @default(now())
  status          String   @default("open") // open, investigating, resolved, false_positive
  resolution      String?  // Resolution description
  resolvedAt      DateTime?
  resolvedBy      String?
  actionTaken     String?  // JSON string of actions taken
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  policy          AIGovernance @relation(fields: [policyId], references: [id], onDelete: Cascade)
  model           AIModel? @relation(fields: [modelId], references: [id], onDelete: SetNull)
  resolvedByUser  AppUser? @relation("AIGovernanceViolationResolver", fields: [resolvedBy], references: [id], onDelete: SetNull)
  
  @@index([tenantId, companyId])
  @@index([policyId])
  @@index([modelId])
  @@index([violationType])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
}

model CurrencyRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  timestamp    DateTime @default(now())
  source       String   @default("external_api")

  @@unique([fromCurrency, toCurrency, timestamp])
  @@map("currency_rates")
}

model PaymentProcessorConfig {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  name        String
  type        String   // stripe, paypal, square
  isActive    Boolean  @default(true)
  config      String   // Encrypted configuration (JSON string)
  environment String   @default("sandbox") // sandbox, production
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, companyId, type])
  @@map("payment_processor_configs")
}

model PaymentIntent {
  id                    String   @id @default(cuid())
  tenantId             String
  companyId             String
  amount                Float
  currency              String   @default("USD")
  status                String   @default("pending") // pending, succeeded, failed, canceled
  clientSecret          String?
  paymentMethodId       String?
  customerId            String?
  description           String?
  metadata              String // JSON string?
  processor             String   // stripe, paypal, square
  processorTransactionId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([tenantId, companyId])
  @@index([status])
  @@index([processor])
  @@map("payment_intents")
}

model PaymentMethod {
  id                      String   @id @default(cuid())
  tenantId               String
  companyId              String
  type                   String   // card, bank_account, paypal, apple_pay, google_pay
  last4                   String?
  brand                  String?
  expMonth               Int?
  expYear                Int?
  bankName               String?
  accountType            String?
  isDefault              Boolean  @default(false)
  customerId             String?
  processor              String   // stripe, paypal, square
  processorPaymentMethodId String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([tenantId, companyId])
  @@index([customerId])
  @@index([processor])
  @@map("payment_methods")
}

model PaymentCustomer {
  id                  String   @id @default(cuid())
  tenantId           String
  companyId           String
  email               String
  name                String?
  phone               String?
  address             String // JSON string?
  metadata            String // JSON string?
  processor           String   // stripe, paypal, square
  processorCustomerId String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([tenantId, companyId, email])
  @@index([processor])
  @@map("payment_customers")
}

model BankConnection {
  id                    String   @id @default(cuid())
  tenantId             String
  companyId             String
  provider              String   // plaid, yodlee, manual
  providerConnectionId  String
  bankName              String
  accountName           String
  accountType           String
  accountNumber         String
  routingNumber         String?
  status                String   @default("pending") // active, inactive, error, pending
  lastSyncAt            DateTime?
  errorMessage          String?
  metadata              String? // JSON string
  isActive              Boolean  @default(true)
  nextSyncAt            DateTime?
  syncFrequency         String   @default("daily")
  credentials           String?  // JSON
  bankId                String?
  currency              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  company               Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  bankTransactions      BankTransaction[]
  syncLogs              BankSyncLog[]
  reconciliationJobs    BankReconciliationJob[] @relation("BankReconciliationJobConnection")

  @@unique([tenantId, companyId, providerConnectionId])
  @@index([provider])
  @@index([status])
  @@map("bank_connections")
}

model MobileMoneyAccount {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  provider      String   // mpesa_kenya, mtn_momo_ghana, etc.
  accountNumber String
  accountName   String
  phoneNumber   String
  balance       Float    @default(0)
  currency      String
  status        String   @default("pending") // active, inactive, suspended, pending
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([tenantId, companyId, provider, phoneNumber])
  @@index([provider])
  @@index([status])
  @@map("mobile_money_accounts")
}

model MobileMoneyTransaction {
  id                    String   @id @default(cuid())
  tenantId             String
  companyId             String
  provider              String
  transactionType       String   // deposit, withdrawal, transfer, payment, reversal
  amount                Float
  currency              String
  reference             String
  externalReference     String?
  phoneNumber           String
  recipientPhoneNumber  String?
  recipientName         String?
  description           String
  status                String   @default("pending") // pending, completed, failed, cancelled
  fees                  Float    @default(0)
  netAmount             Float
  metadata              String // JSON string?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([tenantId, companyId, reference])
  @@index([provider])
  @@index([status])
  @@index([transactionType])
  @@map("mobile_money_transactions")
}


model CardTransaction {
  id               String   @id @default(cuid())
  tenantId         String
  companyId        String
  date             DateTime
  amount           Float
  description      String
  merchant         String?
  source           String?
  status           String   @default("unmatched") // unmatched, matched, dismissed
  matchedExpenseId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  exceptions       CardException[]

  company          Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, status, date])
  @@map("card_transactions")
}

model CardException {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  transactionId String
  reason        String   // unmatched, policy_violation, missing_receipt
  createdAt     DateTime @default(now())

  transaction   CardTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  company       Company         @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, reason])
  @@map("card_exceptions")
}

model Expense {
  id               String   @id @default(cuid())
  tenantId         String
  companyId        String
  description      String
  amount           Float
  totalAmount      Float
  expenseDate      DateTime
  categoryId       String?
  vendorId         String?
  vendorName       String?
  status           String   @default("draft") // draft, submitted, approved, paid, rejected
  receiptUrl       String?
  notes            String?
  department       String?
  project          String?
  
  // Enhanced Accounting Fields
  accountId        String?  // GL Account for expense
  referenceNumber  String?  // Invoice/Receipt reference number
  paymentMethod    String?  // cash, check, card, bank_transfer, etc.
  currency         String   @default("USD")
  exchangeRate     Float    @default(1.0)
  taxRate          Float?   // Tax percentage (e.g., 7.5 for 7.5%)
  taxAmount        Float?   // Calculated tax amount
  isBillable       Boolean  @default(false) // Can be billed to customer/project
  isRecurring      Boolean  @default(false)
  recurringPeriod  String?  // monthly, quarterly, yearly
  nextRecurringDate DateTime?
  
  // Mileage tracking
  mileage          Float?   // Distance in miles/km
  mileageRate      Float?   // Rate per mile/km
  
  // Employee tracking
  submittedBy      String?  // User ID who submitted
  approvedBy       String?  // User ID who approved
  paidBy           String?  // User ID who marked as paid
  submittedAt      DateTime?
  approvedAt       DateTime?
  paidAt           DateTime?
  
  // Split expenses
  splitAccountId   String?  // For split expense allocations (JSON array of {accountId, amount, percentage})
  
  // Attachments
  attachments      String?  // JSON array of file URLs
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  company          Company @relation(fields: [companyId], references: [id])
  category         ExpenseCategory? @relation(fields: [categoryId], references: [id])
  vendor           Vendor? @relation(fields: [vendorId], references: [id])
  account          Account? @relation("ExpenseAccount", fields: [accountId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, categoryId])
  @@index([tenantId, companyId, expenseDate])
  @@index([tenantId, companyId, accountId])
  @@index([tenantId, companyId, submittedBy])
  @@index([tenantId, companyId, isBillable])
  @@map("expenses")
}

// Fixed Assets Models
model FixedAssetCategory {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  name            String
  usefulLifeMonths Int
  method          String   // 'straight_line', 'declining_balance', 'sum_of_years_digits'
  salvageRate     Float    @default(0)
  
  // Chart of Accounts Mapping
  assetAccountId          String?
  depreciationExpenseId   String?
  accumulatedDepreciationId String?
  disposalGainId          String?
  disposalLossId          String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  company Company @relation(fields: [companyId], references: [id])
  assets  FixedAsset[]
  
  @@index([tenantId, companyId])
  @@map("fixed_asset_categories")
}

model FixedAsset {
  id               String   @id @default(cuid())
  tenantId         String
  companyId        String
  categoryId       String
  name             String
  cost             Float
  currency         String   @default("USD")
  acquisitionDate  String   // ISO date string
  startDepreciation String  // ISO date string
  salvageValue     Float?
  notes            String?
  
  // Disposal fields
  disposedAt       String?  // ISO date string
  disposalProceeds Float?
  disposalAccountId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  company  Company           @relation(fields: [companyId], references: [id])
  category FixedAssetCategory @relation(fields: [categoryId], references: [id])
  depreciations FixedAssetDepreciation[]
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, categoryId])
  @@map("fixed_assets")
}

model FixedAssetDepreciation {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  assetId       String
  period        String   // YYYY-MM format
  amount        Float
  accumulated   Float
  postedAt      DateTime?
  journalEntryId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  company      Company    @relation(fields: [companyId], references: [id])
  asset        FixedAsset @relation(fields: [assetId], references: [id])
  journalEntry JournalEntry? @relation(fields: [journalEntryId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, assetId])
  @@index([tenantId, companyId, period])
  @@map("fixed_asset_depreciations")
}

model CreditNote {
  id              String   @id @default(cuid())
  tenantId        String
  companyId       String
  creditNoteNumber String  @unique
  invoiceId       String?  // Reference to original invoice
  customerId      String?  // Reference to customer
  issueDate       DateTime @default(now())
  dueDate         DateTime?
  status          String   @default("draft") // draft, sent, viewed, approved, rejected, applied, cancelled
  totalAmount     Decimal  @default(0)
  currency        String   @default("USD")
  reason          String?  // Reason for credit note
  notes           String?  // Additional notes
  terms           String?  // Payment terms
  
  // Enhanced Credit Note Fields
  subtotal        Decimal  @default(0) // Amount before tax and discounts
  taxAmount       Decimal  @default(0) // Total tax amount
  discountAmount  Decimal  @default(0) // Total discount amount
  exchangeRate    Decimal? // Exchange rate at time of credit note creation
  
  // Customer Communication
  sentAt          DateTime? // When credit note was sent
  viewedAt        DateTime? // When customer first viewed
  lastViewedAt    DateTime? // Last time customer viewed
  reminderCount   Int      @default(0) // Number of reminders sent
  
  // Approval Workflow
  approvedAt      DateTime?
  approvedBy      String?   // User ID who approved
  rejectedAt      DateTime?
  rejectedBy      String?   // User ID who rejected
  rejectionReason String?   // Reason for rejection
  
  // Application to Invoice
  appliedAt       DateTime?
  appliedBy       String?   // User ID who applied
  appliedToInvoiceId String? // Invoice it was applied to
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  company         Company      @relation(fields: [companyId], references: [id])
  invoice         Invoice?     @relation(fields: [invoiceId], references: [id])
  customer        Customer?    @relation(fields: [customerId], references: [id])
  lines           CreditNoteLine[]
  approver        AppUser?     @relation("CreditNoteApprover", fields: [approvedBy], references: [id])
  rejector        AppUser?     @relation("CreditNoteRejector", fields: [rejectedBy], references: [id])
  applier         AppUser?     @relation("CreditNoteApplier", fields: [appliedBy], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, issueDate])
  @@index([tenantId, customerId])
  @@index([tenantId, invoiceId])
  @@map("credit_notes")
}

model CreditNoteLine {
  id           String     @id @default(cuid())
  tenantId     String
  creditNoteId String
  description  String
  quantity     Decimal    @default(1)
  unitPrice    Decimal    @default(0)
  totalAmount  Decimal    @default(0)
  taxRate      Decimal    @default(0) // Tax rate percentage
  taxAmount    Decimal    @default(0) // Tax amount for this line
  discountRate Decimal    @default(0) // Discount rate percentage
  discountAmount Decimal  @default(0) // Discount amount for this line
  
  // Product/Service Reference
  productId    String?    // Reference to product if applicable
  serviceId    String?    // Reference to service if applicable
  
  // Timestamps
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  creditNote   CreditNote @relation(fields: [creditNoteId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, creditNoteId])
  @@map("credit_note_lines")
}

model OCRReceipt {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  imageUrl      String
  extractedText String
  vendor        String?
  amount        Decimal?
  confidence    Float    @default(0.0)
  metadata      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  
  @@index([tenantId, companyId])
  @@index([tenantId, companyId, createdAt])
  @@map("ocr_receipts")
}

model CurrencyAlert {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  fromCurrency  String
  toCurrency    String
  targetRate    Float
  condition     String   // 'above' or 'below'
  isActive      Boolean  @default(true)
  triggeredAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([tenantId, companyId])
  @@index([fromCurrency, toCurrency])
  @@map("currency_alerts")
}

// Budget Management Models
model BudgetDimension {
  id        String   @id @default(cuid())
  companyId String
  name      String
  type      String   // DEPARTMENT, PRODUCT_LINE, GEOGRAPHY, COST_CENTER, PROJECT, CUSTOM
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budget_dimensions")
}

model BudgetScenario {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  description String?
  type        String   // BASE, OPTIMISTIC, PESSIMISTIC, SCENARIO, CUSTOM
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budget_scenarios")
}

model BudgetPeriod {
  id         String    @id @default(cuid())
  companyId  String
  name       String
  startDate  DateTime
  endDate    DateTime
  periodType String    // MONTHLY, QUARTERLY, YEARLY
  frequency  String?   // Alternative field name for periodType
  isClosed   Boolean   @default(false)
  isCurrent  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("budget_periods")
}

model BudgetAccount {
  id          String   @id @default(cuid())
  companyId   String
  accountId   String
  accountName String
  accountType String   // REVENUE, EXPENSE, ASSET, LIABILITY, EQUITY
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("budget_accounts")
}

// Help System Models
model KnowledgeArticle {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  content     String
  category    String   // getting-started, accounting, user-management, troubleshooting, etc.
  tags        String   // JSON string of tags array
  views       Int      @default(0)
  helpful     Boolean  @default(false)
  isPublished Boolean  @default(true)
  authorId    String?
  authorName  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_articles")
}

model SupportTicket {
  id          String   @id @default(cuid())
  tenantId    String
  companyId   String
  userId      String
  userName    String
  title       String
  description String
  category    String   // technical, billing, feature-request, bug-report, general
  priority    String   // low, medium, high, urgent
  status      String   // open, in-progress, resolved, closed
  ticketNumber String  @unique
  assignedTo  String?
  assignedToName String?
  resolution  String?
  attachments String   // JSON string of file URLs array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("support_tickets")
}

model Tutorial {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String
  duration    String   // e.g., "5 min", "12 min"
  category    String   // getting-started, invoicing, reporting, accounting, security
  difficulty  String   // beginner, intermediate, advanced
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  thumbnail   String?
  videoUrl    String?
  content     String?  // Tutorial content/steps
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tutorials")
}

model CommunityDiscussion {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  userName    String
  title       String
  content     String
  category    String   // accounting, reporting, invoicing, general, etc.
  tags        String   // JSON string of tags array
  replies     Int      @default(0)
  views       Int      @default(0)
  pinned      Boolean  @default(false)
  locked      Boolean  @default(false)
  lastActivity DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("community_discussions")
}

model BudgetLineItem {
  id              String   @id @default(cuid())
  budgetId        String
  accountId       String
  dimensionId     String
  periodId        String
  plannedAmount   Decimal
  actualAmount    Decimal  @default(0)
  variance        Decimal  @default(0)
  variancePercent Decimal  @default(0)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("budget_line_items")
}

model RollingForecast {
  id              String   @id @default(cuid())
  companyId       String
  name            String
  description     String?
  basePeriod      String
  forecastPeriods Int
  frequency       String   // MONTHLY, QUARTERLY
  isActive        Boolean  @default(true)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("rolling_forecasts")
}

// Live Chat Models
model ChatSession {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String
  userName      String
  category      String   // technical, account, training, billing, feature, other
  subject       String
  priority      String   // low, medium, high, urgent
  status        String   // open, closed, pending
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  messages      ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  sessionId   String
  senderId    String
  senderName  String
  senderType  String   // user, support, system
  message     String
  messageType String   // text, image, file, system
  timestamp   DateTime @default(now())

  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// File Storage Models
model FileStorage {
  id            String   @id @default(cuid())
  tenantId      String
  fileName      String
  originalName  String
  mimeType      String
  fileSize      Int      // Size in bytes
  fileType      String   // document, video, image, audio, other
  category      String?  // Optional category for organization
  description   String?  // Optional description
  tags          String?  // JSON string of tags array
  mongoFileId   String   // MongoDB GridFS file ID
  downloadUrl   String   // Generated download URL
  isPublic      Boolean  @default(false) // Public or private file
  uploadedBy    String   // User ID who uploaded
  uploadedByName String  // User name who uploaded
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("file_storage")
}

model FileAccess {
  id          String   @id @default(cuid())
  tenantId    String
  fileId      String
  userId      String
  userName    String
  accessType  String   // view, download, edit, delete
  grantedBy   String   // User ID who granted access
  grantedAt   DateTime @default(now())
  expiresAt   DateTime? // Optional expiration date

  @@map("file_access")
}

// Tutorial Video Models
model TutorialVideo {
  id            String   @id @default(cuid())
  tenantId      String
  title         String
  description   String?
  category      String   // onboarding, feature-guide, troubleshooting, etc.
  difficulty    String   // beginner, intermediate, advanced
  duration      Int      // Duration in seconds
  thumbnailUrl  String?  // URL to thumbnail image
  videoFileId   String   // MongoDB GridFS file ID for video
  downloadUrl   String   // Generated download URL
  isPublished   Boolean  @default(false)
  viewCount     Int      @default(0)
  rating        Float?   // Average rating
  ratingCount   Int      @default(0)
  tags          String?  // JSON string of tags array
  createdBy     String   // User ID who created
  createdByName String   // User name who created
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("tutorial_videos")
}

model TutorialVideoView {
  id          String   @id @default(cuid())
  tenantId    String
  videoId     String
  userId      String
  userName    String
  viewedAt    DateTime @default(now())
  duration    Int?     // How long they watched (in seconds)

  @@map("tutorial_video_views")
}

model TutorialVideoRating {
  id          String   @id @default(cuid())
  tenantId    String
  videoId     String
  userId      String
  userName    String
  rating      Int      // 1-5 stars
  comment     String?
  ratedAt     DateTime @default(now())

  @@map("tutorial_video_ratings")
}

// ==================== UNIFIED APPROVAL SYSTEM ====================

model UnifiedApprovalWorkflow {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  name              String
  description       String?
  entityType        String   // journal_entry, invoice, purchase_order, expense, bill, document, recurring_invoice
  entitySubType     String?  // adjustment, reversal, high_value, etc.
  isActive          Boolean  @default(true)
  steps             String   // JSON array of ApprovalStep objects
  conditions        String?  // JSON array of ApprovalCondition objects
  autoApproval      Boolean  @default(false)
  escalationRules   String?  // JSON array of EscalationRule objects
  priority          String   @default("medium") // low, medium, high, critical
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String
  updatedBy         String

  // Relations
  company           Company @relation(fields: [companyId], references: [id])
  approvalRequests  UnifiedApprovalRequest[]

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, entityType])
  @@index([tenantId, companyId, entityType, entitySubType])
  @@index([tenantId, companyId, isActive])
  @@map("unified_approval_workflows")
}

model UnifiedApprovalRequest {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  entityType        String   // journal_entry, invoice, purchase_order, etc.
  entityId          String   // ID of the entity being approved
  entitySubType     String?  // adjustment, reversal, high_value, etc.
  workflowId        String
  status            String   @default("pending") // pending, approved, rejected, escalated, cancelled
  currentStep       Int      @default(1)
  totalSteps        Int
  completedSteps    Int      @default(0)
  requestedBy       String
  requestedAt       DateTime @default(now())
  approvedAt        DateTime?
  rejectedAt        DateTime?
  cancelledAt       DateTime?
  comments          String?
  metadata          String?  // JSON object for additional data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company @relation(fields: [companyId], references: [id])
  workflow          UnifiedApprovalWorkflow @relation(fields: [workflowId], references: [id])
  assignees         UnifiedApprovalAssignee[]
  audits            UnifiedApprovalAudit[]

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, entityType])
  @@index([tenantId, companyId, entityType, entityId])
  @@index([tenantId, companyId, status])
  @@index([tenantId, companyId, requestedBy])
  @@index([tenantId, companyId, workflowId])
  @@map("unified_approval_requests")
}

model UnifiedApprovalAssignee {
  id                String   @id @default(cuid())
  tenantId          String
  approvalRequestId String
  userId            String
  stepId            String   // ID from the workflow step
  stepName          String
  status            String   @default("pending") // pending, approved, rejected, escalated, skipped
  assignedAt        DateTime @default(now())
  completedAt       DateTime?
  comments          String?
  escalatedTo       String?  // User ID if escalated
  escalationReason  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  approvalRequest   UnifiedApprovalRequest @relation(fields: [approvalRequestId], references: [id])
  user              AppUser @relation("UnifiedApprovalAssignee", fields: [userId], references: [id])

  @@index([tenantId, approvalRequestId])
  @@index([tenantId, userId])
  @@index([tenantId, status])
  @@index([tenantId, stepId])
  @@map("unified_approval_assignees")
}

model UnifiedApprovalAudit {
  id                String   @id @default(cuid())
  tenantId          String
  approvalRequestId String
  action            String   // created, step_completed, approved, rejected, escalated, cancelled
  userId            String
  userName          String
  userEmail         String
  stepId            String?
  stepName          String?
  comments          String?
  metadata          String?  // JSON object for additional data
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())

  // Relations
  approvalRequest   UnifiedApprovalRequest @relation(fields: [approvalRequestId], references: [id])

  @@index([tenantId, approvalRequestId])
  @@index([tenantId, userId])
  @@index([tenantId, action])
  @@index([tenantId, createdAt])
  @@map("unified_approval_audits")
}

model UnifiedApprovalTemplate {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  name              String
  description       String?
  entityType        String
  entitySubType     String?
  templateData      String   // JSON object containing workflow configuration
  isSystem          Boolean  @default(false) // System templates vs user-created
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String

  // Relations
  company           Company @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, companyId, entityType])
  @@index([tenantId, companyId, entityType, entitySubType])
  @@index([tenantId, companyId, isSystem])
  @@map("unified_approval_templates")
}

model UnifiedApprovalNotificationSettings {
  id                    String   @id @default(cuid())
  tenantId              String
  companyId             String
  userId                String
  notificationChannels  String   // JSON array: email, sms, slack, teams
  emailEnabled          Boolean  @default(true)
  smsEnabled            Boolean  @default(false)
  slackEnabled          Boolean  @default(false)
  teamsEnabled          Boolean  @default(false)
  escalationEnabled     Boolean  @default(true)
  reminderEnabled       Boolean  @default(true)
  reminderHours         Int      @default(24)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  company               Company @relation(fields: [companyId], references: [id])
  user                  AppUser @relation("UnifiedApprovalNotificationSettings", fields: [userId], references: [id])

  @@index([tenantId, companyId])
  @@index([tenantId, userId])
  @@map("unified_approval_notification_settings")
}

// AI Financial Coach Models
model FinancialGoal {
  id            String   @id @default(cuid())
  tenantId      String
  companyId     String
  userId        String
  name          String
  description   String
  targetAmount  Decimal
  currentAmount Decimal
  targetDate    DateTime
  category      String   // savings, investment, debt, expense, income, other
  priority      String   // low, medium, high
  status        String   // active, completed, paused, cancelled
  progress      Decimal  @default(0)
  metadata      String?  // JSON
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  company       Company  @relation(fields: [companyId], references: [id])
  milestones    FinancialMilestone[]

  @@index([tenantId, companyId, userId])
}

model FinancialMilestone {
  id          String   @id @default(cuid())
  tenantId    String
  goalId      String
  name        String
  targetAmount Decimal
  targetDate  DateTime
  achieved    Boolean  @default(false)
  achievedAt  DateTime?
  metadata    String?  // JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goal        FinancialGoal @relation(fields: [goalId], references: [id])

  @@index([tenantId, goalId])
}

model FinancialAdvice {
  id               String   @id @default(cuid())
  tenantId         String
  companyId        String
  userId           String
  type             String   // savings, investment, budget, debt, tax, general
  title            String
  description      String
  recommendations  String   // JSON array
  priority         String   // low, medium, high
  actionable       Boolean  @default(true)
  estimatedImpact  String   // low, medium, high
  confidence       Decimal  @default(0)
  metadata         String?  // JSON
  createdAt        DateTime @default(now())

  // Relations
  company          Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, userId])
}

model EducationalContent {
  id             String   @id @default(cuid())
  title          String
  description    String
  content        String
  category       String   // basics, intermediate, advanced
  topic          String   // accounting, taxes, investments, budgeting, debt, savings
  difficulty     String   // beginner, intermediate, advanced
  estimatedTime  Int      // in minutes
  tags           String   // JSON array
  metadata       String?  // JSON
  createdAt      DateTime @default(now())

  // Relations
  learningProgress LearningProgress[]

  @@index([category, topic, difficulty])
}

model LearningProgress {
  id           String   @id @default(cuid())
  tenantId     String
  companyId    String
  userId       String
  contentId    String
  status       String   // not_started, in_progress, completed
  progress     Decimal  @default(0) // 0-100
  timeSpent    Int      @default(0) // in minutes
  completedAt  DateTime?
  quizScore    Decimal?
  metadata     String?  // JSON
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company      Company           @relation(fields: [companyId], references: [id])
  content      EducationalContent @relation(fields: [contentId], references: [id])

  @@index([tenantId, companyId, userId])
}

model FinancialScenario {
  id             String   @id @default(cuid())
  tenantId       String
  companyId      String
  userId         String
  name           String
  description    String
  scenario       String   // JSON
  assumptions    String   // JSON
  projections    String   // JSON array
  recommendations String  // JSON array
  metadata       String?  // JSON
  createdAt      DateTime @default(now())

  // Relations
  company        Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, userId])
}

model CoachSession {
  id        String   @id @default(cuid())
  tenantId  String
  companyId String
  userId    String
  sessionId String   @unique
  startTime DateTime
  endTime   DateTime?
  topics    String   // JSON array
  advice    String   // JSON array
  goals     String   // JSON array
  content   String   // JSON array
  metadata  String?  // JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company  @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, userId])
}

// Auto Bookkeeper Models
model AutoBookkeeperConfig {
  id                    String   @id @default(cuid())
  tenantId             String
  companyId             String
  isEnabled             Boolean  @default(true)
  autoCategorization    Boolean  @default(true)
  autoReconciliation    Boolean  @default(true)
  autoJournalEntry      Boolean  @default(false)
  confidenceThreshold   Decimal  @default(0.8)
  rules                 String?  // JSON
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  company               Company @relation(fields: [companyId], references: [id])

  @@unique([tenantId, companyId])
  @@index([tenantId, companyId])
}

model TransactionCategorization {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  transactionId     String
  category          String
  subcategory       String?
  confidence        Decimal  @default(0)
  aiSuggestions     String?  // JSON
  userConfirmed     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId, transactionId])
}

model AutoReconciliation {
  id                String   @id @default(cuid())
  tenantId          String
  companyId         String
  bankTransactionId String
  internalTransactionId String?
  matchType         String   // exact, fuzzy, ai_suggested, manual
  confidence        Decimal  @default(0)
  status            String   @default("pending") // pending, confirmed, rejected
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company @relation(fields: [companyId], references: [id])

  @@index([tenantId, companyId])
}

